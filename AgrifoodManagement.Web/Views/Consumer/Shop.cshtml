@using AgrifoodManagement.Web.Models.Shop;
@using AgrifoodManagement.Util.ValueObjects;

@{
    Layout = "~/Views/Shared/_ConsumerNavbarLayout.cshtml";
    ViewData["Title"] = "Shop";

    var unitOfMeasurementData = Enum.GetValues(typeof(MeasurementUnit))
        .Cast<MeasurementUnit>()
        .Select(e => new { text = e.ToString(), value = e.ToString().ToLower() })
        .ToArray();

    var priceData = new[] {
        new { text = "All Prices", value = "all" },
        new { text = "Under 15 lei", value = "under-15" },
        new { text = "15 - 25 lei", value = "15-25" },
        new { text = "25 - 45 lei", value = "25-45" },
        new { text = "Over 45 lei", value = "over-45" }
    };

    var sortData = new[] {
        new { text = "Popularity", value = "popularity" },
        new { text = "Price: Low to High", value = "price-low" },
        new { text = "Price: High to Low", value = "price-high" },
        new { text = "Newest First", value = "newest" }
    };
}

@model ShopViewModel

<div class="container">
    <section class="all-products">
        <div class="section-header">
            <h2 class="section-title">All Products</h2>
        </div>

        <div class="filter-container">
            <div class="filter-section">
                <div class="filter-group">
                    <ejs-dropdownlist id="unit-filter"
                                      dataSource='@unitOfMeasurementData'
                                      placeholder="Select Unit">
                        <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </div>
                <div class="filter-group">
                    <ejs-dropdownlist id="price-filter"
                                      dataSource='@priceData'
                                      placeholder="Select price range">
                        <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </div>
                <div class="filter-group">
                    <ejs-dropdownlist id="sort-by"
                                      dataSource='@sortData'
                                      placeholder="Sort by">
                        <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </div>
            </div>
            <ejs-button id="filter-button"
                        content="Apply Filters"
                        isPrimary="true">
            </ejs-button>
        </div>

        <div class="products-grid large-grid">
            @foreach (var product in Model.Products)
            {
                @await Html.PartialAsync("_ProductCard", product)
            }
        </div>

        <div class="pagination">
            <div class="pagination">
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    if (i == Model.CurrentPage)
                    {
                        <span class="page-link active">@i</span>
                    }
                    else
                    {
                        <a href="@Url.Action("Shop", new { page = i })" class="page-link">@i</a>
                    }
                }

                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <a href="@Url.Action("Shop", new { page = Model.CurrentPage + 1 })" class="page-link next">Next →</a>
                }
        </div>
    </section>
</div>

<ejs-toast id="cartToast" created="onCartToastCreated">
    <e-toast-position X="Right" Y="Top"></e-toast-position>
</ejs-toast>

<script>
    var cartToastObj;

    function onCartToastCreated() {
        cartToastObj = document.getElementById('cartToast').ej2_instances[0];
    }

    function showCartToast({ title, content, type = 'success' }) {
        cartToastObj.show({
            title: title,
            content: content,
            cssClass: `e-toast-${type}`,
            icon: `e-${type} toast-icons`
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        const filterButton = document.getElementById('filter-button');
        
        if (filterButton) {
            filterButton.addEventListener('click', function () {
                const unitOfMeasurement = document.getElementById('unit-filter').ej2_instances[0]?.value;
                const priceRange = document.getElementById('price-filter').ej2_instances[0]?.value;
                const sortBy = document.getElementById('sort-by').ej2_instances[0]?.value;

                if (unitOfMeasurement && priceRange && sortBy) {
                    const allProducts = document.querySelectorAll('.all-products .product-card');
                    allProducts.forEach(product => {
                        product.style.opacity = '0.5';

                        setTimeout(() => {
                            product.style.opacity = '1';
                        }, 500);
                    });
                } else {
                    console.error('One of the dropdown values is missing!');
                }
            });
        }

        const productCards = document.querySelectorAll('.product-card');

        productCards.forEach(card => {
            card.addEventListener('mouseenter', function () {
                this.querySelector('.product-actions').classList.add('show');
            });

            card.addEventListener('mouseleave', function () {
                this.querySelector('.product-actions').classList.remove('show');
            });
        });
    });
</script>