@{
    Layout = "~/Views/Shared/_ConsumerNavbarLayout.cshtml";

    var SubmitBtn = new { content = "Submit", isPrimary = true };
    var CancelBtn = new { content = "Cancel" };
}

@model OrderHistoryViewModel

<div class="order-history-page">
    <div class="order-history-container">
        <div class="order-header-row">
            <p class="delivery-note">
                <strong>Note:</strong> <em>Processing</em> may mean unpicked or already in delivery (no delivery app integration yet).
            </p>
        </div>

        <ejs-treegrid id="OrderTreeGrid"
                      dataSource="@(Model.Orders)"
                      childMapping="Children"
                      treeColumnIndex="0"
                      allowSorting="true"
                      allowFiltering="true"
                      rowHeight="52"
                      height="520"
                      load="onGridLoad"
                      gridLines="None">
            <e-treegrid-filtersettings type="Menu"></e-treegrid-filtersettings>
            <e-treegrid-columns>
                <e-treegrid-column field="Id" headerText="Id" width="260" textAlign="Center" clipMode="EllipsisWithTooltip"></e-treegrid-column>
                <e-treegrid-column field="Name" headerText="Product" width="250" textAlign="Center" clipMode="EllipsisWithTooltip"></e-treegrid-column>
                <e-treegrid-column field="Delivery" headerText="Delivery" width="140" textAlign="Center"></e-treegrid-column>
                <e-treegrid-column field="Status" headerText="Status" width="140" textAlign="Center" template="#statusTemplate"></e-treegrid-column>
                <e-treegrid-column field="Quantity" headerText="Quantity" width="100" textAlign="Center"></e-treegrid-column>
                <e-treegrid-column field="Total" headerText="Total" width="120" textAlign="Center" template="#totalTemplate"></e-treegrid-column>
                <e-treegrid-column headerText="Action" width="160" textAlign="Center" template="actionTemplate" allowFiltering="false" allowSorting="false"></e-treegrid-column>
            </e-treegrid-columns>
        </ejs-treegrid>
    </div>
</div>

<ejs-toast id="actionToast" newestOnTop="true" showCloseButton="true" timeOut="4000">
    <e-toast-position X="Right" Y="Top"></e-toast-position>
</ejs-toast>

<ejs-dialog id="reviewDialog"
            header="Leave a Review"
            showCloseIcon="true"
            width="500px"
            target="body"
            visible="false"
            created="onReviewDialogCreated">

    <e-content-template>
        <div style="padding:1rem;">
            <label style="display:block; margin-bottom:0.5rem;">Rating</label>
            <div id="starContainer" class="star-container">
                <span class="star" data-value="1">★</span>
                <span class="star" data-value="2">★</span>
                <span class="star" data-value="3">★</span>
                <span class="star" data-value="4">★</span>
                <span class="star" data-value="5">★</span>
            </div>

            <div style="margin-top:1rem;">
                <label for="reviewComment" style="display:block; margin-bottom:0.5rem;">Comment</label>
                <textarea id="reviewComment"
                          style="width:100%; height:100px; padding:0.5rem; border:1px solid #ccc; border-radius:4px;"
                          placeholder="Write your review…"></textarea>
            </div>
        </div>
    </e-content-template>

    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@(SubmitBtn)"
                               click="onSubmitReview">
        </e-dialog-dialogbutton>
        <e-dialog-dialogbutton buttonModel="@(CancelBtn)"
                               click="onCancelReview">
        </e-dialog-dialogbutton>
    </e-dialog-buttons>

</ejs-dialog>

<script id="statusTemplate" type="text/x-template">
    <span class="status-badge ${Status.toLowerCase()}">${Status}</span>
</script>

<script id="totalTemplate" type="text/x-template">
    ${data.Total.toFixed(2)} lei
</script>

<script>
    let reviewDialog;
    let selectedProductId;

    function showToast(type, title, message) {
        const toastObj = document.getElementById('actionToast').ej2_instances[0];
        toastObj.show({
            title: title,
            content: message,
            cssClass: `e-toast-${type}`,
            icon: `e-${type} toast-icons`
        });
    }

    function onReviewDialogCreated() {
        reviewDialog = this;

        const stars = document.querySelectorAll('#starContainer .star');
        stars.forEach(star => {
            star.addEventListener('click', () => {
                selectedRating = parseInt(star.dataset.value, 10);
                stars.forEach(s => {
                    s.classList.toggle('filled', parseInt(s.dataset.value, 10) <= selectedRating);
                });
            });
        });
    }

    function openReviewDialog(productId) {
        selectedProductId = productId;
        selectedRating = 0;
        document.querySelectorAll('#starContainer .star').forEach(s => s.classList.remove('filled'));
        document.getElementById('reviewComment').value = '';
        reviewDialog.show();
    }

    function onSubmitReview() {
        const comment = document.getElementById('reviewComment').value.trim();

        fetch('/History/AddReview', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                productId: selectedProductId, 
                rating: selectedRating, 
                comment 
            })
        })
            .then(r => r.json())
            .then(result => {
                showToast(
                    result.success ? 'success' : 'error',
                    result.success ? 'Thank you' : 'Oops',
                    result.success ? 'Your review was submitted.' : 'Could not submit your review.'
                );
                reviewDialog.hide();
            })
            .catch(() => {
                showToast('error', 'Error', 'Network error.');
                reviewDialog.hide();
            });
    }

    function onCancelReview() {
        reviewDialog.hide();
    }

    function onGridLoad(args) {
        var grid = document.getElementById("OrderTreeGrid").ej2_instances[0];

        grid.columns.forEach(function (col) {
            if (col.headerText === "Action") {
                col.template = actionTemplate;
            }
        });
    }

    function actionTemplate(data) {
        if (data.Children && data.Children.length) {
            if (data.Status === "Processing") {
                return "<button class='e-btn e-danger small-action-btn' " +
                    "onclick=\"cancelOrder('" + data.Id + "')\">" +
                    "Cancel</button>";
            }
            if (data.Status === "Shipped") {
                return "<button class='e-btn e-success small-action-btn' " +
                    "onclick=\"completeOrder('" + data.Id + "')\">" +
                    "Complete</button>";
            }
            if (data.Status === "Completed") {
                return `<button class="e-btn e-secondary small-action-btn"
                            onclick="downloadInvoice('${data.Id}')"
                            title="Download Invoice">
                      <i class="fas fa-file-download"></i>
                    </button>`;
            }
            return "";
        }
        const parentStatus = data.parentItem && data.parentItem.Status;
        let html = "";

        if ((parentStatus === "Processing" || parentStatus === "Shipped")
            && data.SellerPhone) {
            html += `<button class="e-btn e-info small-action-btn"
                         onclick="showToast('info','Seller Phone','${data.SellerPhone}')">
                   <i class="fas fa-phone"></i>
                 </button>`;
        }

        if (parentStatus === "Completed" && data.CanReview) {
            html += `<button class="e-btn e-primary small-action-btn"
                         onclick="openReviewDialog('${data.Id}')">
                   Leave Review
                 </button>`;
        }

        return html;
    }

    function cancelOrder(id) {
        ej.popups.DialogUtility.confirm({
            title: 'Cancel Order',
            content: 'Are you sure you want to cancel this order?',
            okButton: {
                click: function () {
                    this.hide();
                    fetch('/History/UpdateStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId: id,
                            newStatus: 'Canceled'
                        })
                    })
                        .then(res => {
                            if (res.ok) {
                                showToast("success",  "Canceled", "Order was canceled successfully.");
                                setTimeout(() => location.reload(), 4500);
                            } else {
                                showToast("error", "Error", "Could not cancel the order.");
                            }
                        });
                }
            },
            cancelButton: {
                text: 'Cancel',
                click: function () { this.hide(); }
            },
            animationSettings: { effect: 'Zoom' },
            width: '400px',
            position: { X: 'center', Y: 'center' },
            closeOnEscape: true
        });
    }

    function completeOrder(id) {
        ej.popups.DialogUtility.confirm({
            title: 'Complete Order',
            content: 'Mark this order as completed?',
            okButton: {
                click: function () {
                    this.hide();
                    fetch('/History/UpdateStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId: id,
                            newStatus: 'Completed'
                        })
                    })
                        .then(res => {
                            if (res.ok) {
                                showToast("success", "Completed", "Order marked as completed.");
                                setTimeout(() => location.reload(), 4500);
                            } else {
                                showToast("error", "Error", "Could not complete the order.");
                            }
                        });
                }
            },
            cancelButton: {
                text: 'Cancel',
                click: function () { this.hide(); }
            },
            animationSettings: { effect: 'Zoom' },
            width: '500px',
            position: { X: 'center', Y: '100px' },
            closeOnEscape: true
        });
    }

    function downloadInvoice(orderId) {
        window.location.href = `/History/DownloadInvoice?id=${orderId}`;
    }
</script>
