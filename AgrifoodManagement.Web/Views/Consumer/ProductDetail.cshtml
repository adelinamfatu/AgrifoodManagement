@using AgrifoodManagement.Web.Models.Shop

@{
    Layout = "~/Views/Shared/_ConsumerNavbarLayout.cshtml";
    ViewData["Title"] = "Product Detail";
}

@model ProductViewModel

<div class="product-detail-container">
    <div class="product-detail-row">
        <div class="product-detail-col-left">
            <div class="product-detail-image-main">
                <img id="product-mainImage" src="@(Model.ImageUrls?.FirstOrDefault() ?? "/images/no-image-placeholder.png")"
                     class="product-detail-img-fluid" alt="@Model.Name" />
            </div>

            <div class="product-detail-thumbnails">
                @if (Model.ImageUrls != null && Model.ImageUrls.Count() > 0)
                {
                    foreach (var url in Model.ImageUrls)
                    {
                        <div class="product-detail-thumbnail-item" onclick="changeProductImage('@url')">
                            <img src="@url" class="product-detail-thumb-img" alt="Thumbnail" />
                        </div>
                    }
                }
                else
                {
                    <div class="product-detail-thumbnail-item">
                        <img src="/images/no-image-placeholder.png" class="product-detail-thumb-img" alt="No Image" />
                    </div>
                }
            </div>
        </div>

        <div class="product-detail-col-right">
            <div class="product-detail-category text-center">@Model.CategoryName</div>

            <h1 class="product-detail-title text-center">@Model.Name</h1>

            <div class="product-detail-producer text-center">
                By <strong>@Model.ProducerName</strong>
            </div>

            <div class="product-detail-rating text-center">
                <ejs-rating id="rating"
                        value="@Model.Rating"
                        readOnly="true"
                        max="5">
                </ejs-rating>
                <span class="review-count">(@Model.ReviewCount)</span>
                <ejs-button id="viewReviewsBtn"
                            cssClass="see-reviews-btn e-flat"
                            iconCss="fas fa-comment-dots review-icon"
                            tooltip="View all reviews"
                            onclick="openReviewsDialog()">
                </ejs-button>
            </div>

            <div class="product-detail-description">
                @Model.Description
            </div>

            <div class="product-detail-specifications">
                <div class="spec-row">
                    <div class="spec-box">
                        <div class="spec-label">QUANTITY AVAILABLE</div>
                        <div class="spec-value">@Model.Quantity</div>
                    </div>
                    <div class="spec-box">
                        <div class="spec-label">UNIT</div>
                        <div class="spec-value">@Model.UnitOfMeasurementText</div>
                    </div>
                </div>
            </div>

            <div class="product-detail-expiry text-center">
                <label>Expires on: <strong>@(Model.ExpiryDate != null ? Model.ExpiryDate.ToString("MM/dd/yyyy") : "")</strong></label>
            </div>

            <div class="product-detail-price-container">
                <div class="product-detail-price">
                    <span class="price-current">@Model.CurrentPrice lei</span>
                    <span class="price-unit">per @Model.UnitOfMeasurementText</span>
                </div>
            </div>

            <div class="product-detail-controls">
                <div class="product-detail-quantity-selector">
                    <label for="quantitySelector" class="quantity-label">Quantity:</label>
                    <ejs-numerictextbox id="quantitySelector" min="1" max="@Model.Quantity" value="1" format="n0" step="1" cssClass="quantity-input-large"></ejs-numerictextbox>
                </div>

                <div class="product-detail-buttons">
                    <ejs-button id="addToCartBtn" cssClass="e-flat btn-custom" content="ADD TO CART" isPrimary="false" onclick="addToCart()"></ejs-button>
                </div>
            </div>
        </div>
    </div>
</div>

<ejs-dialog id="reviewsDialog"
            header="Customer Reviews"
            visible="false"
            width="400px"
            showCloseIcon="true"
            target="body">
    <e-content-template>
        <div class="reviews-list">
            @if (Model.Reviews.Any())
            {
                @foreach (var r in Model.Reviews)
                {
                    <div class="review-item mb-3 p-2 border rounded">
                        <div>
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= r.Rating)
                                {
                                    <span>★</span>
                                }
                                else
                                {
                                    <span style="color:#ccc">★</span>
                                }
                            }
                        </div>
                        <p class="mb-1">@r.Comment</p>
                        <small class="text-muted">
                            by <strong>@r.ReviewerName</strong> on @r.Date.ToString("MM/dd/yyyy")
                        </small>
                    </div>
                }
            }
            else
            {
                <p>No reviews yet.</p>
            }
        </div>
    </e-content-template>
</ejs-dialog>

<ejs-toast id="cartToast" created="onCartToastCreated">
    <e-toast-position X="Right" Y="Top"></e-toast-position>
</ejs-toast>

<script>
    let cartToastObj;

    function onCartToastCreated() {
        cartToastObj = this;
    }

    function showCartToast({ title, content, type = 'success' }) {
        cartToastObj.show({
            title: title,
            content: content,
            cssClass: `e-toast-${type}`,
            icon: `e-${type} toast-icons`
        });
    }

    function openReviewsDialog() {
        const dlg = document.getElementById('reviewsDialog').ej2_instances[0];
        dlg.show();
    }

    function changeProductImage(src) {
        document.getElementById('product-mainImage').src = src;
    }

    function addToCart() {
        const quantity = parseInt(document.getElementById("quantitySelector").ej2_instances[0].value);
        const productId = "@Model.Id";

        fetch("/Cart/AddProduct", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ productId, quantity })
        })
            .then(response => response.json())
            .then(data => {
                showCartToast({
                    title: 'Added to Cart',
                    content: data.message || 'Product added successfully!',
                    type: 'success'
                });
            })
            .catch(err => {
                showCartToast({
                    title: 'Error',
                    content: 'Something went wrong while adding to cart.',
                    type: 'error'
                });
            });
    }
</script>