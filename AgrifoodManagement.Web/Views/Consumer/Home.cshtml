@using AgrifoodManagement.Web.Models.Shop;

@{
    Layout = "~/Views/Shared/_ConsumerNavbarLayout.cshtml";
    ViewData["Title"] = "Harvestica";

    var totalPages = (int)Math.Ceiling((double)Model.Deals.Count / 5);
}

@model HomeViewModel

<div class="container">
    <section class="hero">
        <div class="hero-content">
            <p class="discount-text">Empowering Local Agriculture</p>
            <h1 class="hero-title">Connect Farmers with Businesses — Smart, Sustainable, Local</h1>
            <p class="hero-description">
                A digital marketplace where farmers list fresh produce and businesses buy locally, efficiently, and smartly.
                Real-time stock tracking, expiry alerts, price forecasting, personalized recommendations & more.
            </p>
            <a href="/Listings/Explore" class="shop-now-btn">Explore Products</a>
        </div>
        <img class="hero-image" src="/images/farm.png" alt="Organic Vegetables in Bag" />
        <div class="hero-icons"></div>
    </section>

    <section class="deal-of-week">
        <h2 class="deal-title">Deal of the Week</h2>
        <div class="countdown-container">
            <div class="countdown-timer">
                <div class="timer-unit">
                    <span class="timer-value">00</span>
                    <span class="timer-label">DAYS</span>
                </div>
                <div class="timer-separator">:</div>
                <div class="timer-unit">
                    <span class="timer-value">00</span>
                    <span class="timer-label">HOURS</span>
                </div>
                <div class="timer-separator">:</div>
                <div class="timer-unit">
                    <span class="timer-value">00</span>
                    <span class="timer-label">MIN</span>
                </div>
                <div class="timer-separator">:</div>
                <div class="timer-unit">
                    <span class="timer-value">00</span>
                    <span class="timer-label">SEC</span>
                </div>
            </div>
        </div>
        <div class="deal-visuals">
            <img class="deal-image deal-image--bag" src="@Url.Content("~/images/veggie-bag.png")" alt="Veggie Bag Deal of the Week">
            <img class="deal-image deal-image--tomatoes" src="@Url.Content("~/images/tomato.png")" alt="Fresh Tomatoes">
        </div>
    </section>

    <section class="weekly-deals">
        <div class="section-header">
            <div class="pagination-dots">
                @for (int i = 0; i < totalPages; i++)
                {
                    <span class="dot @(i == 0 ? "active" : "")" data-page="@i"></span>
                }
            </div>
        </div>
        <div class="products-grid" id="products-grid">
            @{
                int productIndex = 0;
                foreach (var product in Model.Deals)
                {
                    var pageClass = $"page-{productIndex / 5}";
                    <div class="product-wrapper @pageClass" style="display:@(productIndex < 5 ? "block" : "none")">
                        @await Html.PartialAsync("_ProductCard", product)
                    </div>
                    productIndex++;
                }
            }
        </div>
    </section>

    <section class="category-section">
        <div class="section-header">
            <h2 class="section-title">Search by Category</h2>
        </div>
        <div class="category-slider">
            @foreach (var mainCategory in Model.Categories)
            {
                <div class="category-item" data-category-id="@mainCategory.Id">
                    <div class="category-img">
                        <img src="@mainCategory.ImageUrl" alt="@mainCategory.Category" />
                    </div>
                    <p class="category-name">@mainCategory.Category</p>
                    @if (mainCategory.Children.Any())
                    {
                        <div class="category-arrow">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M6 9l6 6 6-6"></path>
                            </svg>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="subcategories-container">
            @foreach (var mainCategory in Model.Categories)
            {
                <div class="subcategories-panel" id="category-panel-@mainCategory.Id">
                    <div class="subcategories-header">
                        <h3>@mainCategory.Category</h3>
                        <button class="close-panel">×</button>
                    </div>
                    <div class="subcategories-grid">
                        @if (mainCategory.Children.Any())
                        {
                            foreach (var sub in mainCategory.Children)
                            {
                                <a href="/Products/Category/@sub.Id" class="subcategory-card">
                                    <div class="subcategory-img">
                                        <img src="@(string.IsNullOrEmpty(sub.ImageUrl) ? mainCategory.ImageUrl : sub.ImageUrl)" alt="@sub.Category" />
                                    </div>
                                    <span class="subcategory-name">@sub.Category</span>
                                    <p class="subcategory-description">@(sub.Description ?? "Explore " + sub.Category + " products")</p>
                                </a>
                            }
                        }
                        else
                        {
                            <p class="no-subcategories">No subcategories available</p>
                        }
                    </div>
                    <a href="/Consumer/Shop" class="view-all-link">View All Products</a>
                </div>
            }
        </div>
    </section>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        function startCountdown() {
            const now = new Date();
            const endOfWeek = new Date(now);

            if (now.getDay() === 0) {
                endOfWeek.setHours(24, 0, 0, 0);
            } else {
                endOfWeek.setDate(now.getDate() + (7 - now.getDay()));
                endOfWeek.setHours(0, 0, 0, 0);
            }

            function updateTimer() {
                const currentTime = new Date();
                const diff = endOfWeek - currentTime;

                if (diff <= 0) {
                    document.querySelectorAll('.timer-value').forEach(el => el.textContent = "00");
                } else {
                    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

                    // Update the timer values dynamically
                    const timerValues = document.querySelectorAll('.timer-value');
                    if (timerValues.length >= 4) {
                        timerValues[0].textContent = String(days).padStart(2, '0');
                        timerValues[1].textContent = String(hours).padStart(2, '0');
                        timerValues[2].textContent = String(minutes).padStart(2, '0');
                        timerValues[3].textContent = String(seconds).padStart(2, '0');
                    }
                }
            }

            updateTimer();
            setInterval(updateTimer, 1000);
        }

        startCountdown();

        const dots = document.querySelectorAll('.pagination-dots .dot');
        const productPages = document.querySelectorAll('.product-wrapper');
        const productsPerPage = 5;

        dots.forEach(dot => {
            dot.addEventListener('click', () => {
                dots.forEach(d => d.classList.remove('active'));
                dot.classList.add('active');

                const pageIndex = parseInt(dot.getAttribute('data-page'));

                productPages.forEach((p, i) => {
                    p.style.display = Math.floor(i / productsPerPage) === pageIndex ? 'block' : 'none';
                });
            });
        });

        const slider = document.querySelector('.category-slider');

        const categoryItems = document.querySelectorAll('.category-item');
        const subcategoryPanels = document.querySelectorAll('.subcategories-panel');

        categoryItems.forEach(item => {
            item.addEventListener('click', function () {
                const categoryId = this.getAttribute('data-category-id');
                const panel = document.getElementById(`category-panel-${categoryId}`);
                subcategoryPanels.forEach(p => p.classList.remove('active'));
                if (panel) {
                    panel.classList.add('active');
                    setTimeout(() => {
                        panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                    }, 100);
                }
            });
        });

        const closeButtons = document.querySelectorAll('.close-panel');
        closeButtons.forEach(button => {
            button.addEventListener('click', function () {
                this.closest('.subcategories-panel').classList.remove('active');
            });
        });

        document.addEventListener('click', function (event) {
            if (!event.target.closest('.category-item') &&
                !event.target.closest('.subcategories-panel')) {
                subcategoryPanels.forEach(panel => panel.classList.remove('active'));
            }
        });
    });
</script>
