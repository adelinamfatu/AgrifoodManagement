@using AgrifoodManagement.Web.Models.Shop;
@using AgrifoodManagement.Util.ValueObjects;
@using System.Text.Json;

@{
    Layout = "~/Views/Shared/_ConsumerNavbarLayout.cshtml";
    ViewData["Title"] = "Checkout";
}

@model CheckoutViewModel

<div class="checkout-container">
    <div class="checkout-content">
        <div class="checkout-header">
            <a href="@Url.Action("Basket", "Consumer")" class="back-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M10 12L6 8L10 4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                Back to cart
            </a>
            <h1 class="page-title">Checkout</h1>
            <p class="page-description">Complete your purchase of fresh, locally-grown produce directly from farmers in your area</p>
        </div>

        <div class="checkout-form">
            <div class="checkout-section">
                <h2 class="section-title">1. Contact information</h2>

                <div class="form-row">
                    <div class="form-group">
                        <ejs-textbox id="street" name="Street" placeholder="Street" cssClass="e-outline" floatLabelType="Auto"></ejs-textbox>
                    </div>

                    <div class="form-group">
                        <ejs-textbox id="number" name="Number" placeholder="Number" cssClass="e-outline" floatLabelType="Auto"></ejs-textbox>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <ejs-textbox id="city" name="City" placeholder="City" cssClass="e-outline" floatLabelType="Auto"></ejs-textbox>
                    </div>
                    <div class="form-group">
                        <ejs-textbox id="country" name="Country" placeholder="Country" cssClass="e-outline" floatLabelType="Auto"></ejs-textbox>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group phone-group">
                        <ejs-dropdownlist id="countryCode"
                                          cssClass="e-outline"
                                          name="CountryCode"
                                          placeholder="Country Code"
                                          floatLabelType="Auto"
                                          dataSource="@(ViewBag.CountryCodes)"
                                          popupHeight="300px"
                                          popupWidth="240px">
                            <e-dropdownlist-fields text="Text" value="Value"></e-dropdownlist-fields>
                        </ejs-dropdownlist>

                        <ejs-maskedtextbox id="phoneNumber" name="PhoneNumber"
                                           mask="000 000 000"
                                           placeholder="Phone number"
                                           floatLabelType="Auto"
                                           cssClass="e-outline"
                                           value="@Model.PhoneNumber"></ejs-maskedtextbox>
                    </div>

                    <div class="form-group">
                        <ejs-textbox id="email" name="Email" type="Email" placeholder="Email address" cssClass="e-outline" floatLabelType="Auto" value="@Model.Email"></ejs-textbox>
                    </div>
                </div>
            </div>

            <div class="checkout-section">
                <h2 class="section-title">2. Delivery method</h2>

                <div class="delivery-options">
                    @foreach (var method in DeliveryFeeMap.Options.Keys)
                    {
                        var option = DeliveryFeeMap.Options[method];
                        var isChecked = Model.DeliveryMethod == method ? "checked" : "";
                        <label class="delivery-option">
                            <input type="radio" name="selectedDelivery" value="@method" @isChecked />
                            <div class="delivery-option-content @(isChecked != "" ? "selected" : "")">
                                @Html.Raw(option.SvgIcon)
                                <span>@method</span>
                            </div>
                        </label>
                    }
                </div>
            </div>

            <div class="checkout-section">
                <h2 class="section-title">3. Payment method</h2>

                <div class="payment-options">
                    <label class="payment-option disabled">
                        <input type="radio" name="PaymentMethod" value="Visa" disabled />
                        <div class="payment-option-content">
                            <img src="/images/visa.png" alt="Visa" class="payment-logo" />
                            <span>Visa <small class="text-muted">(Not available yet)</small></span>
                        </div>
                    </label>

                    <label class="payment-option disabled">
                        <input type="radio" name="PaymentMethod" value="Mastercard" disabled />
                        <div class="payment-option-content">
                            <img src="/images/mastercard.png" alt="Mastercard" class="payment-logo" />
                            <span>Mastercard <small class="text-muted">(Not available yet)</small></span>
                        </div>
                    </label>

                    <label class="payment-option">
                        <input type="radio" name="PaymentMethod" value="Stripe" checked />
                        <div class="payment-option-content selected">
                            <img src="/images/stripe.png" alt="Stripe" class="payment-logo" />
                            <span>Stripe</span>
                        </div>
                    </label>
                </div>
            </div>

            <div class="checkout-section">
                <h2 class="section-title">4. Discount code</h2>
                <div class="form-row">
                    <div class="form-group">
                        <ejs-textbox id="discountCode" name="DiscountCode" placeholder="Enter discount code" cssClass="e-outline" floatLabelType="Auto" value="@Model.DiscountCode"></ejs-textbox>
                    </div>
                    <div class="form-group" style="max-width: 150px;">
                        <ejs-button id="applyDiscountBtn" cssClass="e-outline pay-button" content="Apply" button-type="Button"></ejs-button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="order-summary">
        <div class="card-preview">
            <div class="card-design">
                <div class="card-chip"></div>
                <div class="card-contactless"></div>
                <div class="card-details">
                    <div class="card-exp">Exp: 12 / 99</div>
                    <div class="card-number">•••• 1234</div>
                    <div class="card-name">Mr. ABC</div>
                </div>
            </div>
        </div>

        <div class="order-details">
            <h2 class="order-title">@Model.ItemCount items</h2>

            <div class="order-costs">
                <div class="cost-row">
                    <span class="cost-label">Subtotal</span>
                    <span class="cost-value" id="subtotalValue">@Model.Subtotal.ToString("F2") lei</span>
                </div>

                @if (Model.Discount > 0)
                {
                    <div class="cost-row discount" id="discount-row">
                        <span class="cost-label">Discount</span>
                        <span class="cost-value discount" id="discountValue">
                            -@Model.Discount.ToString("F2") lei
                            @if (Model.DiscountPercentage > 0)
                            {
                                <text> (@Model.DiscountPercentage%)</text>
                            }
                        </span>
                    </div>
                }

                <div class="cost-row">
                    <span class="cost-label">Delivery Service</span>
                    <span class="cost-value" id="deliveryFeeValue">+@Model.DeliveryFee.ToString("F2") lei</span>
                </div>

                <div class="cost-row total">
                    <span class="cost-label">Total</span>
                    <span class="cost-value total-value" id="totalValue">@Model.TotalAmount.ToString("F2") lei</span>
                </div>
            </div>

            <button id="payBtn" class="pay-button">
                Pay →
            </button>
        </div>
    </div>

    <input type="hidden" id="orderId" value="@Model.OrderId" />
</div>

<ejs-toast id="actionToast" newestOnTop="true" showCloseButton="true" timeOut="4000">
    <e-toast-position X="Right" Y="Top"></e-toast-position>
</ejs-toast>

<script>
    const currentDiscount = @Model.Discount.ToString("F2");
    const currentDiscountPercentage = @Model.DiscountPercentage;
    const modelSubtotal = parseFloat("@Model.Subtotal.ToString("F2").Replace(',', '.')");
    const modelDiscount = parseFloat("@Model.Discount.ToString("F2").Replace(',', '.')");
</script>
<script src="https://js.stripe.com/v3/"></script>
<script>
    const deliveryFees = @Html.Raw(JsonSerializer.Serialize(
        DeliveryFeeMap.Options.ToDictionary(kvp => kvp.Key, kvp => decimal.Parse(kvp.Value.Fee.ToString(System.Globalization.CultureInfo.InvariantCulture)))
    ));

    function showToast(type, title, message) {
        const toastObj = document.getElementById('actionToast').ej2_instances[0];
        toastObj.show({
            title: title,
            content: message,
            cssClass: `e-toast-${type}`,
            icon: `e-${type} toast-icons`
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        @if (TempData["DiscountError"] != null)
        {
            <text>
                    showToast('error', 'Oops!', '@TempData["DiscountError"]');
            </text>
            ;
        }

        document.getElementById('applyDiscountBtn').addEventListener('click', function (e) {
            e.preventDefault();

            const discountCode = document.getElementById('discountCode')?.value?.trim() || "";
            const selectedDelivery = document.querySelector('input[name="selectedDelivery"]:checked')?.value || "Normal";

            const url = `@Url.Action("Checkout", "Cart")?selectedDelivery=${selectedDelivery}&discountCode=${encodeURIComponent(discountCode)}`;
            window.location.href = url;
            });

        const deliveryOptions = document.querySelectorAll('.delivery-option input[type="radio"]');

        function updateDeliveryFee(deliveryMethod) {
            const deliveryFee = deliveryFees[deliveryMethod] || 0;

            // Update UI
            const deliveryFeeSpan = document.getElementById('deliveryFeeValue');
            deliveryFeeSpan.textContent = `+${deliveryFee.toFixed(2)} lei`;

            // Calculate new total
            const newTotal = modelSubtotal + deliveryFee - modelDiscount;

            const totalSpan = document.getElementById('totalValue');
            totalSpan.textContent = `${newTotal.toFixed(2)} lei`;
            }

        deliveryOptions.forEach(radio => {
            radio.addEventListener('change', function () {
                document.querySelectorAll('.delivery-option-content').forEach(content => {
                    content.classList.remove('selected');
                });

                if (this.checked) {
                    this.parentElement.querySelector('.delivery-option-content').classList.add('selected');
                    updateDeliveryFee(this.value);
                }
            });
        });

        const paymentOptions = document.querySelectorAll('.payment-option input[type="radio"]');

        paymentOptions.forEach(radio => {
            radio.addEventListener('change', function () {
                document.querySelectorAll('.payment-option-content').forEach(content => {
                    content.classList.remove('selected');
                });

                if (this.checked) {
                    this.parentElement.querySelector('.payment-option-content').classList.add('selected');
                }
            });
        });
    });

    document.getElementById('payBtn').addEventListener('click', async function (e) {
        e.preventDefault();

        // Validate contact info
        const streetEl = document.getElementById('street').ej2_instances?.[0];
        const numberEl = document.getElementById('number').ej2_instances?.[0];
        const cityEl = document.getElementById('city').ej2_instances?.[0];
        const countryEl = document.getElementById('country').ej2_instances?.[0];
        const phoneEl = document.getElementById('phoneNumber').ej2_instances?.[0];
        const emailEl = document.getElementById('email').ej2_instances?.[0];

        const street = streetEl?.value?.trim();
        const number = numberEl?.value?.trim();
        const city = cityEl?.value?.trim();
        const country = countryEl?.value?.trim();
        const phone = phoneEl?.value?.trim();
        const email = emailEl?.value?.trim();

        if (!street || !number || !city || !country || !phone || !email) {
            showToast('error', 'Incomplete Info', 'Please fill out all contact information before proceeding.');
            return;
        }

        const data = {
            orderId: "@Model.OrderId",
            postalCode: document.getElementById('postalCode')?.ej2_instances?.[0]?.value?.trim() || "",
            deliveryMethod: @Html.Raw(JsonSerializer.Serialize(Model.DeliveryMethod ?? "Normal")),
            discountCode: @Html.Raw(JsonSerializer.Serialize(Model.DiscountCode ?? "")),
            deliveryFee: parseFloat("@Model.DeliveryFee.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)"),
            totalAmount: parseFloat("@Model.TotalAmount.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)"),
            phoneNumber: (@Html.Raw(JsonSerializer.Serialize(Model.CountryCode ?? "+40")) +
                (document.getElementById('phoneNumber')?.ej2_instances?.[0]?.value?.trim() || "")),
            deliveryAddress: [
                document.getElementById('street')?.ej2_instances?.[0]?.value?.trim(),
                document.getElementById('number')?.ej2_instances?.[0]?.value?.trim(),
                document.getElementById('city')?.ej2_instances?.[0]?.value?.trim(),
                document.getElementById('country')?.ej2_instances?.[0]?.value?.trim()
            ].filter(Boolean).join(', ')
        };

        const saveResponse = await fetch('@Url.Action("SaveOrder", "Cart")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        if (!saveResponse.ok) {
            const errorText = await saveResponse.text();
            showToast('error', 'Failed to save order', 'Could not create order. Try again.');
            return;
        }

        const { orderId } = await saveResponse.json();

        // Stripe session
        const sessionData = {
            orderId: orderId,
            deliveryMethod: data.deliveryMethod,
            totalAmount: data.totalAmount
        };

        const sessionResponse = await fetch('@Url.Action("CreateCheckoutSession", "Cart")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(sessionData)
        });

        if (!sessionResponse.ok) {
            const errorText = await sessionResponse.text();
            showToast('error', 'Checkout session failed', 'Something went wrong. Try again.');
            return;
        }

        const { sessionId, publishableKey } = await sessionResponse.json();

        const stripe = Stripe(publishableKey);
        const { error } = await stripe.redirectToCheckout({ sessionId });

        if (error) {
            showToast('error', 'Oops!', 'Something went wrong. Try again.');
        }
    });
</script>