@using AgrifoodManagement.Web.Models.Shop

@{
    Layout = "~/Views/Shared/_ConsumerNavbarLayout.cshtml";
    ViewData["Title"] = "Your Basket";
}

@model BasketViewModel

<div class="basket-container">
    @if (!Model.Items.Any())
    {
        <div class="empty-basket">
            <i class="fas fa-shopping-basket empty-icon"></i>
            <h3 class="empty-title">Your basket is empty</h3>
            <p class="empty-subtitle">Browse our fresh produce and add something to your cart!</p>
            <a href="@Url.Action("Shop","Consumer")" class="btn btn-success empty-btn">
                Start Shopping
            </a>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="card shadow-sm mb-4">
                    <div class="card-body">
                        <ejs-grid id="BasketGrid"
                                  dataSource="@Model.Items"
                                  allowPaging="true"
                                  allowSorting="true"
                                  beginEdit="onBeginEdit"
                                  actionComplete="onCartActionComplete"
                                  toolbar="@(new List<string>() { "Edit", "Delete", "Update", "Cancel" })">
                            <e-grid-editSettings allowAdding="false"
                                                 allowDeleting="true"
                                                 allowEditing="true"
                                                 showDeleteConfirmDialog="true"
                                                 mode="Normal" />

                            <e-grid-columns>
                                <e-grid-column field="Id" isPrimaryKey="true" visible="false"></e-grid-column>
                                <e-grid-column field="ImageUrl" headerText="Image" width="120" textAlign="Center"
                                               allowEditing="false"
                                               template='<div class="text-center"><img src="${ImageUrl}" alt="${Name}" class="product-image rounded" /></div>'>
                                </e-grid-column>
                                <e-grid-column field="Name" headerText="Product" width="120" allowEditing="false" textAlign="Center" />
                                <e-grid-column field="Category" headerText="Category" width="120" allowEditing="false" textAlign="Center" />
                                <e-grid-column field="QuantityOrdered" headerText="Quantity" width="120" textAlign="Center"
                                               allowEditing="true" validationRules="@(new { required=true, min=0 })"
                                               editType="numericedit">
                                </e-grid-column>
                                <e-grid-column field="PricePerUnit" headerText="Price Details (lei)" width="120"
                                               allowEditing="false" textAlign="Center">
                                </e-grid-column>
                            </e-grid-columns>
                        </ejs-grid>
                    </div>
                </div>
            </div>

            <div class="col-12">
                <div class="checkout-container-new">
                    <div>
                        <div class="cart-order-summary" style="margin-top: 10px;">
                            <div class="summary-row">
                                <span class="summary-label">Subtotal:</span>
                                <span class="summary-value">@Model.SubTotal.ToString("N2") lei</span>
                            </div>
                            <div class="summary-row">
                                <span class="summary-label">Shipping:</span>
                                <span class="summary-value">@Model.ShippingCost.ToString("N2") lei</span>
                            </div>
                            <div class="summary-row total-row">
                                <span class="summary-label fw-bold">Total:</span>
                                <span class="summary-value fw-bold">@Model.Total.ToString("N2") lei</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

                <div class="buttons-container-new mb-4" style="width:100%;">
                    <div class="continue-shopping-container-new">
                        <ejs-button id="continueShoppingBtn" cssClass="e-outline" content="CONTINUE SHOPPING"
                                    onclick="window.location='@Url.Action("Shop","Consumer")'"></ejs-button>
                    </div>
                    <div class="checkout-container-new">
                        <ejs-button id="checkoutBtn" cssClass="e-primary" content="CHECKOUT"
                                    onclick="window.location='@Url.Action("Checkout","Cart")'"></ejs-button>
                    </div>
                </div>
            </div>
        
    }

</div>

<ejs-toast id="cartErrorToast" created="onCartToastCreated">
    <e-toast-position X="Right" Y="Top"></e-toast-position>
</ejs-toast>

<script>
    let cartErrorToast;

    function onCartToastCreated() {
        cartErrorToast = document.getElementById('cartErrorToast').ej2_instances[0];
    }

    function showCartError(content) {
        cartErrorToast.show({
            title: 'Error',
            content,
            cssClass: 'e-toast-danger',
            icon: 'e-error toast-icons'
        });
    }

    async function onCartActionComplete(args) {
        const grid = document.getElementById('BasketGrid').ej2_instances[0];

        if (args.requestType === 'save') {
            const { Id: orderDetailId, QuantityOrdered: NewQuantity } = args.data;

            if (NewQuantity === 0) {
                const resp = await fetch(`/Cart/RemoveItem/${orderDetailId}`, { method: 'DELETE' });
                const { message } = await resp.json();
                if (!resp.ok) {
                    showCartError(message);
                    return;
                }
                grid.deleteRecord('Id', { Id: orderDetailId });
                return;
            }

            const command = { OrderDetailId: orderDetailId, NewQuantity };
            const resp2 = await fetch('/Cart/UpdateQuantity', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(command)
            });
            const json2 = await resp2.json();
            if (!resp2.ok) {
                showCartError(json2.message);
            }
            return;
        }

        if (args.requestType === 'delete') {
            const orderDetailId = args.data.Id;
            const resp = await fetch(`/Cart/RemoveItem/${orderDetailId}`, { method: 'DELETE' });
            const { message } = await resp.json();
            if (!resp.ok) {
                showCartError(message);
            }
        }
    }

    function onBeginEdit(args) {
        if (args.columnName === 'QuantityOrdered') {
            var input = args.form.querySelector('input[name="QuantityOrdered"]');
            if (!input) return;

            var numeric = input.ej2_instances && input.ej2_instances[0];
            if (!numeric) return;

            numeric.max = args.rowData.MaxQuantity;
            numeric.dataBind();
        }
    }
</script>