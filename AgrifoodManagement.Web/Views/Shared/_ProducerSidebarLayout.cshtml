@{
    Layout = "_ProducerLayout";
    var sidebarItems = ViewBag.SidebarItems as List<SidebarViewModel>;

    var antiforgery = Context.RequestServices.GetService<Microsoft.AspNetCore.Antiforgery.IAntiforgery>();
    var tokenSet = antiforgery.GetAndStoreTokens(Context);

    bool isPro = ViewBag.IsPro as bool? ?? false;
    int daysLeft = ViewBag.DaysLeft as int? ?? 0;
}

<div class="layout-container">
    <div class="toolbar-container">
        <ejs-toolbar id="toolbar">
            <e-toolbar-items>
                <e-toolbar-item prefixIcon="bi bi-list" cssClass="menu-button" id="menu-toggle"></e-toolbar-item>
                <e-toolbar-item text="Harvestica" cssClass="app-title"></e-toolbar-item>
                <e-toolbar-item template="<div class='toolbar-right-items'>
                    <div class='avatar-container'>
                        <img src='@ViewBag.AvatarUrl' alt='User Avatar' class='user-avatar' id='userAvatar'>
                        <div class='user-info'>
                            <div class='user-name'>@ViewBag.FullName</div>
                            <div class='user-role'>Producer</div>
                        </div>
                        <input type='file' id='photoInput' accept='image/*' style='display:none;' />
                    </div>
                    <form action='/Account/Logout'
                          method='post'
                          class='logout-form'
                          id='logoutForm'
                          style='margin-left:8px;'>
                        <input type='hidden' name='__RequestVerificationToken' value='@tokenSet.RequestToken' />
                        <button type='button' id='logoutBtn' class='logout-button' title='Logout'>
                            <i class='bi bi-box-arrow-right'></i> Logout
                        </button>
                    </form>
                </div>" cssClass="toolbar-right">
                </e-toolbar-item>
            </e-toolbar-items>
        </ejs-toolbar>
    </div>

    <div class="content-wrapper">
        <div id="sidebar-wrapper">
            <ejs-sidebar id="sidebarObj" Width="260px" Position="Left" target="#contentArea" type="Push">
                <e-content-template>
                    <div id="sidebar-menu">
                        @if (sidebarItems != null)
                        {
                            @foreach (var item in sidebarItems)
                            {
                                bool locked = item.IsPro && !isPro;

                                <div class="menu-item @(item.Id == ViewBag.ActiveItemId ? "active" : "")" onclick="navigateTo('@item.Url', '@item.Id')">
                                    <div class="menu-item-content">
                                        <i class="menu-item-icon @item.IconCss"></i>
                                        <span class="menu-item-text">@item.Name</span>
                                    </div>
                                    @if (item.IsPro)
                                    {
                                        <span class="pro-badge">Pro</span>
                                    }
                                </div>
                            }
                        }

                        @if (!isPro)
                        {
                            <div class="upgrade-pro-container">
                                <div class="upgrade-pro-logo"><i class="bi bi-gem"></i></div>
                                <h3>Upgrade to PRO</h3>
                                <p>Improve your development process and start doing more with Harvestica PRO!</p>
                                <button id="upgradeProBtn" type="button" class="upgrade-button">
                                    Upgrade to PRO
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="countdown-pro-container">
                                <div class="upgrade-pro-logo"><i class="bi bi-hourglass-split"></i></div>
                                <h3>PRO Expires</h3>
                                <p>
                                    @if (daysLeft > 1)
                                    {
                                        @($"in {daysLeft} days")
                                    }
                                    else if (daysLeft == 1)
                                    {
                                        <strong>in 1 day</strong>
                                    }
                                    else
                                    {
                                        <strong>today</strong>
                                    }
                                </p>
                                <small>Renew to keep your PRO access.</small>
                            </div>
                        }
                    </div>
                </e-content-template>
            </ejs-sidebar>
        </div>

        <div id="contentArea">
            @RenderBody()
            @RenderSection("Scripts", required: false)
        </div>
    </div>
</div>

<div id="logoutConfirmDialog"></div>
<div id="upgradeConfirmDialog"></div>
<ejs-toast id="upgradeToast" newestOnTop="true" showCloseButton="true" timeOut="4000">
    <e-toast-position X="Right" Y="Top"></e-toast-position>
</ejs-toast>

<script src="https://js.stripe.com/v3/"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var sidebar = document.getElementById('sidebarObj').ej2_instances[0];

        document.getElementById('menu-toggle').addEventListener('click', function () {
            sidebar.toggle();
        });

        // Avatar click to open file input
        document.getElementById('userAvatar').addEventListener('click', function () {
            document.getElementById('photoInput').click();
        });

        // Handle file selection and upload
        document.getElementById('photoInput').addEventListener('change', function () {
            if (this.files && this.files[0]) {
                var formData = new FormData();
                formData.append('photo', this.files[0]);

                const avatarImg = document.getElementById('userAvatar');
                const originalSrc = avatarImg.src;

                fetch('/Account/UploadPhoto', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Server returned ' + response.status);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Update avatar image if successful
                            avatarImg.src = data.imageUrl;
                        } else {
                            showToast(
                                'error',
                                'Upload failed',
                                'An error occured. Please try again later'
                            );
                        }
                    })
                    .catch(error => {
                        showToast(
                            'error',
                            'Upload failed',
                            'An error occurred during upload. Please try again later.'
                        );
                    });
            }
        });

        var dialogObj = new ej.popups.Dialog({
            header: 'Confirm Logout',
            content: '<div class="logout-question-container">' +
                '<div class="logout-question-text">Are you sure you want to logout?</div>' +
                '</div>',
            showCloseIcon: false,
            width: '350px',
            isModal: true,
            visible: false,
            target: document.body,
            cssClass: 'logout-dialog rounded-dialog',
            buttons: [
                {
                    click: function () {
                        dialogObj.hide();
                    },
                    buttonModel: {
                        content: 'NO',
                        isPrimary: false,
                        cssClass: 'e-flat no-btn'
                    }
                },
                {
                    click: function () {
                        document.getElementById('logoutForm').submit();
                    },
                    buttonModel: {
                        content: 'YES',
                        isPrimary: true,
                        cssClass: 'e-flat yes-btn'
                    }
                }
            ],
            position: { X: 'center', Y: 'center' }
        });

        dialogObj.appendTo('#logoutConfirmDialog');

        document.getElementById('logoutBtn').addEventListener('click', function () {
            dialogObj.show();
        });

        var upgradeDialog = new ej.popups.Dialog({
            header: 'Confirm Upgrade',
            content: '<div class="confirm-upgrade-text">Are you sure you want to upgrade to PRO?</div>',
            showCloseIcon: false,
            width: '350px',
            isModal: true,
            visible: false,
            target: document.body,
            cssClass: 'upgrade-dialog rounded-dialog',
            buttons: [
                {
                    click: function () { upgradeDialog.hide(); },
                    buttonModel: { content: 'NO', isPrimary: false, cssClass: 'e-flat no-btn' }
                },
                {
                    click: function () {
                        upgradeDialog.hide();
                        createProCheckout();
                    },
                    buttonModel: { content: 'YES', isPrimary: true, cssClass: 'e-flat yes-btn' }
                }
            ],
            position: { X: 'center', Y: 'center' }
        });

        upgradeDialog.appendTo('#upgradeConfirmDialog');

        const upgradeBtn = document.getElementById('upgradeProBtn');
        if (!upgradeBtn) {
            return;
        }
        upgradeBtn.addEventListener('click', e => {
            e.preventDefault();
            upgradeDialog.show();
        });

        async function createProCheckout() {
            try {
                const res = await fetch('@Url.Action("CreateProCheckoutSession", "Account")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const payload = await res.json();
                if (!payload.success) {
                    throw new Error(payload.error || 'Unknown error');
                }
                const stripe = Stripe(payload.publishableKey);
                const { error } = await stripe.redirectToCheckout({ sessionId: payload.sessionId });
                if (error) throw error;
            } catch (err) {
                showToast(
                    'error',
                    'Checkout Failed',
                    'An error occured. Please try again later'
                );
            }
        }
    });

    function navigateTo(url, id) {
        document.querySelectorAll('.menu-item').forEach(item => {
            item.classList.remove('active');
        });

        document.querySelector(`.menu-item[onclick*='${id}']`).classList.add('active');

        window.location.href = url;
    }

    function showToast(type, title, message) {
        const toastObj = document.getElementById('upgradeToast').ej2_instances[0];
        toastObj.show({
            title: title,
            content: message,
            cssClass: `e-toast-${type}`
        });
    }
</script>