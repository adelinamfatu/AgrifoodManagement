@using AgrifoodManagement.Web.Models.Forum;
@using Syncfusion.EJ2.Popups
@using Syncfusion.EJ2.Inputs
@using Syncfusion.EJ2.DropDowns

@{
    Layout = "~/Views/Shared/_SidebarLayout.cshtml";
}

@model List<TopicViewModel>

<div id="target" class="container">
    <div class="forum-header">
        <div class="filters">
            <select class="filter-dropdown">
                <option>Latest first</option>
                <option>Popular first</option>
                <option>Oldest first</option>
            </select>
        </div>
    </div>

    <div class="forum-content">
        <div class="discussions">
            @foreach (var topic in Model)
            {
                <div class="topic-card" data-topic-id="@topic.Id">
                    <div class="topic-main">
                        <div class="topic-author">
                            <div class="author-avatar">
                                <img src="@(string.IsNullOrEmpty(topic.Author.AvatarUrl) ? "/api/placeholder/40/40" : topic.Author.AvatarUrl)" alt="@topic.Author.Name avatar">
                            </div>
                        </div>
                        <div class="topic-content">
                            <div class="topic-header">
                                <h3 class="topic-title">@topic.Title</h3>
                            </div>
                            @if (!string.IsNullOrEmpty(topic.Category))
                            {
                                <div class="category-tag tag-@topic.Category.ToLower().Replace(" ", "-")">@topic.Category</div>
                            }
                            <div class="topic-meta">Latest reply from @topic.LatestReplyAuthor @topic.LatestReplyTimeAgo</div>
                            <p class="topic-text">@topic.Text</p>
                            <div class="topic-stats">
                                <div class="topic-commenters">
                                    @foreach (var commenter in topic.TopCommenters.Take(4))
                                    {
                                        <div class="commenter-avatar">
                                            <img src="@(string.IsNullOrEmpty(commenter.AvatarUrl) ? "/api/placeholder/24/24" : commenter.AvatarUrl)" alt="@commenter.Name">
                                        </div>
                                    }
                                </div>
                                <span class="comments-count" onclick="toggleComments(@topic.Id)">@topic.CommentsCount Comments</span>
                            </div>
                        </div>
                    </div>
                    <div class="comments-section" id="comments-@topic.Id">
                        <div class="comments-list">
                            @if (topic.Comments != null && topic.Comments.Any())
                            {
                                foreach (var comment in topic.Comments)
                                {
                                    <div class="comment">
                                        <div class="comment-author">
                                            <div class="author-avatar">
                                                <img src="@(string.IsNullOrEmpty(comment.Author.AvatarUrl) ? "/api/placeholder/40/40" : comment.Author.AvatarUrl)" alt="@comment.Author.Name avatar">
                                            </div>
                                        </div>
                                        <div class="comment-content">
                                            <div class="comment-header">
                                                <span class="comment-author-name">@comment.Author.Name</span>
                                                <span class="comment-date">@comment.TimeAgo</span>
                                            </div>
                                            <p class="comment-text">@comment.Text</p>
                                            <div class="comment-actions">
                                                <span class="comment-action">Like</span>
                                                <span class="comment-action">Reply</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No comments yet. Be the first to comment!</p>
                            }
                        </div>
                        <div class="add-comment">
                            <textarea class="comment-input" placeholder="Add your comment..."></textarea>
                            <button class="submit-comment-btn" onclick="submitComment(@topic.Id)">Submit</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="sidebar">
            <button id="openDialogBtn" class="new-discussion-btn-large">Start New Discussion</button>

            <div class="sidebar-section">
                <ul class="sidebar-links">
                    <li class="sidebar-link">
                        <span class="dot dot-yellow"></span>
                        FAQ's
                    </li>
                    <li class="sidebar-link">
                        <span class="dot dot-green"></span>
                        Off-Topic Chatter
                    </li>
                    <li class="sidebar-link">
                        <span class="dot dot-purple"></span>
                        Feedback
                    </li>
                    <li class="sidebar-link">
                        <span class="dot dot-red"></span>
                        Member Spotlight
                    </li>
                    <li class="sidebar-link">
                        <span class="dot dot-teal"></span>
                        Introductions
                    </li>
                    <li class="sidebar-link">
                        <span class="dot dot-pink"></span>
                        Announcements
                    </li>
                    <li class="sidebar-link">
                        <span class="dot dot-blue"></span>
                        Showcase
                    </li>
                    <li class="sidebar-link">
                        <span class="dot dot-gray"></span>
                        Jobs
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div id="newDiscussionDialog"></div>

<script>
    // Function to toggle comments visibility
    function toggleComments(topicId) {
        const commentsSection = document.getElementById(`comments-${topicId}`);
        if (commentsSection.style.display === 'block') {
            commentsSection.style.display = 'none';
        } else {
            document.querySelectorAll('.comments-section').forEach(section => {
                section.style.display = 'none';
            });
            commentsSection.style.display = 'block';
        }
    }

    function submitComment(topicId) {
        const commentSection = document.getElementById(`comments-${topicId}`);
        const commentInput = commentSection.querySelector('.comment-input');
        const commentText = commentInput.value.trim();

        if (commentText) {
            fetch('/Forum/AddComment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    topicId: topicId,
                    commentText: commentText
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const commentsList = commentSection.querySelector('.comments-list');
                        const noCommentsMsg = commentsList.querySelector('p');
                        if (noCommentsMsg && noCommentsMsg.textContent.includes('No comments yet')) {
                            commentsList.innerHTML = '';
                        }
                        const newComment = document.createElement('div');
                        newComment.className = 'comment';
                        newComment.innerHTML = `
                            <div class="comment-author">
                                <div class="author-avatar">
                                    <img src="${data.author.avatarUrl}" alt="${data.author.name} avatar">
                                </div>
                            </div>
                            <div class="comment-content">
                                <div class="comment-header">
                                    <span class="comment-author-name">${data.author.name}</span>
                                    <span class="comment-date">${data.timeAgo}</span>
                                </div>
                                <p class="comment-text">${commentText}</p>
                                <div class="comment-actions">
                                    <span class="comment-action">Like</span>
                                    <span class="comment-action">Reply</span>
                                </div>
                            </div>
                        `;
                        commentsList.appendChild(newComment);
                        commentInput.value = '';
                        const topicCard = document.querySelector(`.topic-card[data-topic-id="${topicId}"]`);
                        const commentsCountElem = topicCard.querySelector('.comments-count');
                        const currentCount = parseInt(commentsCountElem.textContent);
                        commentsCountElem.textContent = `${currentCount + 1} Comments`;
                    }
                })
                .catch(error => {
                    console.error('Error submitting comment:', error);
                });
        }
    }

    document.querySelectorAll('.topic-main').forEach(topicMain => {
        topicMain.addEventListener('click', function () {
            const topicId = this.closest('.topic-card').dataset.topicId;
            toggleComments(topicId);
        });
    });
    document.querySelectorAll('.comments-count').forEach(commentsCount => {
        commentsCount.addEventListener('click', function (e) {
            e.stopPropagation();
        });
    });
    document.querySelectorAll('.sidebar-link').forEach(link => {
        link.addEventListener('click', function () {
            document.querySelectorAll('.sidebar-link').forEach(l => {
                l.classList.remove('active');
            });
            this.classList.add('active');
            document.querySelectorAll('.sidebar-link .checkmark').forEach(checkmark => {
                checkmark.remove();
            });
            const checkmark = document.createElement('span');
            checkmark.className = 'checkmark';
            checkmark.textContent = '✓';
            this.appendChild(checkmark);
        });
    });

    function initializeDialog() {
        var dialogObj = new ej.popups.Dialog({
            header: 'Add New Discussion',
            showCloseIcon: true,
            width: '500px',
            position: { X: 'center', Y: '100px' },
            target: document.getElementById('target'),
            visible: false,
            buttons: [
                {
                    click: function () {
                        var title = document.getElementById('discussionTitle').value;
                        var content = document.getElementById('discussionContent').value;
                        var category = document.getElementById('discussionCategory').value;
                        if (!title.trim()) {
                            alert("Please enter a title");
                            return;
                        }
                        alert("Adding new discussion:\nTitle: " + title + "\nContent: " + content + "\nCategory: " + category);
                        document.getElementById('discussionTitle').value = '';
                        document.getElementById('discussionContent').value = '';
                        dialogObj.hide();
                    },
                    buttonModel: { content: 'Add Discussion', isPrimary: true }
                },
                {
                    click: function () {
                        dialogObj.hide();
                    },
                    buttonModel: { content: 'Cancel' }
                }
            ],
            close: function () {
                console.log("Dialog closed");
            },
            // Use the 'content' property to define the dialog's inner HTML
            content: `
                    <div class="form-group" style="margin-bottom: 15px;">
                        <label for="discussionTitle">Title</label>
                        <input type="text" id="discussionTitle" class="form-control" placeholder="Enter discussion title" />
                    </div>
                    <div class="form-group" style="margin-bottom: 15px;">
                        <label for="discussionContent">Content</label>
                        <textarea id="discussionContent" class="form-control" placeholder="Enter discussion content" rows="4"></textarea>
                    </div>
                    <div class="form-group" style="margin-bottom: 15px;">
                        <label for="discussionCategory">Category</label>
                        <select id="discussionCategory" class="form-control">
                            <option value="Introductions">Introductions</option>
                            <option value="FAQ">FAQ</option>
                            <option value="Off-Topic">Off-Topic</option>
                            <option value="Feedback">Feedback</option>
                        </select>
                    </div>
                `
        });
        dialogObj.appendTo('#newDiscussionDialog');
        window.newDiscussionDialog = dialogObj;
        console.log("Dialog initialized programmatically");
        document.getElementById('openDialogBtn').addEventListener('click', function () {
            window.newDiscussionDialog.show();
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        initializeDialog();
    });
</script>
