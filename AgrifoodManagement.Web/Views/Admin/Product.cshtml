@using AgrifoodManagement.Util.ValueObjects;
@using AgrifoodManagement.Util.Models;

@model ProductViewModel

@{
    Layout = "~/Views/Shared/_SidebarLayout.cshtml";

    var productCategoriesData = ViewBag.ProductCategories as List<CategoryNode>;

    var discountTypesData = new[] {
        "Choose New Year Discount",
        "Seasonal Discount",
        "Clearance Sale"
    };

    var unitsData = Enum.GetValues(typeof(MeasurementUnit))
                        .Cast<MeasurementUnit>()
                        .Select(g => g.ToString())
                        .ToList();
}

<div class="add-product-container">
    <form id="addProductForm" asp-controller="Product" asp-action="UpsertProductAsync" method="post" enctype="multipart/form-data">
        <input type="hidden" asp-for="Id" />

        <div class="page-header">
            <div class="header-title">
                <h1>@(Model.Id == Guid.Empty ? "Add New Product" : "Edit Product")</h1>
            </div>
            <div class="action-buttons">
                <ejs-button id="saveDraftBtn" content="Save Draft" cssClass="e-outline"></ejs-button>
                <ejs-button id="addProductBtn" type="submit" content="Add Product" cssClass="e-success"></ejs-button>
            </div>
        </div>

        <div class="form-container">
            <div class="form-left-panel">
                <div class="form-section">
                    <h2>General Information</h2>
                    <div class="form-group inline-input">
                        <label for="Name" title="Name Product">
                            <i class="fa fa-tag"></i>
                        </label>
                        <ejs-textbox id="Name" name="Name" value="@Model.Name" cssClass="e-outline"
                                     placeholder="Name Product" floatLabelType="Auto" required="true">
                        </ejs-textbox>
                    </div>

                    <div class="form-group inline-input">
                        <label for="Description" title="Description Product">
                            <i class="fa fa-info-circle"></i>
                        </label>
                        <ejs-textbox id="Description" name="Description" value="@Model.Description" cssClass="e-outline"
                                     placeholder="Description Product" floatLabelType="Auto"
                                     multiline="true" rows="4">
                        </ejs-textbox>
                    </div>
                </div>

                <div class="form-section">
                    <h2>Pricing And Stock</h2>
                    <div class="form-group inline-input form-row">
                        <div class="col">
                            <label for="Price" title="Base Pricing">
                                <i class="fa fa-dollar-sign"></i>
                            </label>
                            <div class="input-group">
                                <ejs-textbox id="Price" name="Price" value="@Model.Price" cssClass="e-outline"
                                             placeholder="Price" floatLabelType="Auto" type="number"
                                             step="0.01" required="true">
                                </ejs-textbox>
                            </div>
                        </div>

                        <div class="col">
                            <label for="Quantity" title="Stock">
                                <i class="fa fa-warehouse"></i>
                            </label>
                            <ejs-textbox id="Quantity" name="Quantity" value="@Model.Quantity" cssClass="e-outline"
                                         placeholder="Stock" floatLabelType="Auto" type="number" required="true">
                            </ejs-textbox>
                        </div>
                    </div>

                    <div class="form-group inline-input form-row">
                        <div class="col">
                            <label for="DiscountType" title="Discount Type">
                                <i class="fa fa-tag"></i>
                            </label>
                            <div class="input-group">
                                <ejs-dropdownlist id="DiscountType" name="DiscountType"
                                        dataSource="@discountTypesData"
                                        placeholder="Select discount type"
                                        index="0"
                                        popupHeight="220px"
                                        change="valueChange">
                                    <e-dropdownlist-fields text="this" value="this"></e-dropdownlist-fields>
                                </ejs-dropdownlist>
                            </div>
                        </div>

                        <div class="col">
                            <label for="Discount" title="Discount">
                                <i class="fa fa-percentage"></i>
                            </label>
                            <div class="input-group">
                                <ejs-textbox id="Discount" name="Discount" cssClass="e-outline"
                                             placeholder="Discount" floatLabelType="Auto" type="number" min="0" max="100">
                                </ejs-textbox>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-section">
                    <h2>Additional Information</h2>
                    <div class="form-group inline-input form-row">
                        <div class="col">
                            <label for="UnitOfMeasurement" title="Unit of Measurement">
                                <i class="fa fa-ruler"></i>
                            </label>
                            <ejs-dropdownlist id="UnitOfMeasurement" name="UnitOfMeasurement"
                                              dataSource="@unitsData"
                                              value="@Model.UnitOfMeasurement"
                                              placeholder="Select unit of measurement"
                                              index="0"
                                              popupHeight="220px"
                                              change="valueChange">
                                <e-dropdownlist-fields text="Unit" value="Id"></e-dropdownlist-fields>
                            </ejs-dropdownlist>
                        </div>

                        <div class="col">
                            <label for="ExpirationDate" title="Expiration Date">
                                <i class="fa fa-calendar-alt"></i>
                            </label>
                            <ejs-datepicker id="ExpirationDate" name="ExpirationDate"
                                            value="@Model.ExpirationDate"
                                            placeholder="Choose a Date" floatLabelType="Auto">
                            </ejs-datepicker>
                        </div>
                    </div>
                </div>
                </div>

            <div class="form-right-panel">
                <div class="upload-section">
                    <h2>Upload Img</h2>

                    <div class="main-image-upload">
                        <div class="image-preview" id="mainImagePreview">
                            <img src="/images/upload-placeholder.png" alt="Upload product image" id="mainPreviewImg">
                            <div class="upload-overlay">
                                <i class="fa fa-cloud-upload"></i>
                                <p>Click or drag image to upload</p>
                            </div>
                        </div>
                        <input type="file" id="mainImageUpload" name="MainImage" accept="image/*" class="hidden-file-input">
                    </div>

                    <div class="thumbnail-container">
                        <div class="thumbnail-upload">
                            <div class="thumbnail-preview">
                                <img src="/images/upload-placeholder.png" alt="Thumbnail 1">
                            </div>
                            <input type="file" name="Thumbnail1" accept="image/*" class="hidden-file-input">
                        </div>

                        <div class="thumbnail-upload">
                            <div class="thumbnail-preview">
                                <img src="/images/upload-placeholder.png" alt="Thumbnail 2">
                            </div>
                            <input type="file" name="Thumbnail2" accept="image/*" class="hidden-file-input">
                        </div>

                        <div class="thumbnail-upload">
                            <div class="thumbnail-preview">
                                <img src="/images/upload-placeholder.png" alt="Thumbnail 3">
                            </div>
                            <input type="file" name="Thumbnail3" accept="image/*" class="hidden-file-input">
                        </div>
                    </div>
                </div>

                <div class="category-section">
                    <h2>Category</h2>
                    <div class="form-group inline-input">
                        <label for="Category" title="Product Category">
                            <i class="fa fa-list"></i>
                        </label>
                        <ejs-dropdowntree id="Category" name="Category"
                                          popupHeight="220px"
                                          placeholder="Select a product category"
                                          changeOnBlur="false">
                            <e-dropdowntree-fields dataSource="@productCategoriesData"
                                                   value="@Model.Category"
                                                   text="Category"
                                                   parentValue="ParentId"
                                                   hasChildren="HasChildren"
                                                   expanded="Expanded">
                            </e-dropdowntree-fields>
                        </ejs-dropdowntree>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<script>
    // Preview uploaded images
    document.getElementById('mainImageUpload').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById('mainPreviewImg').src = e.target.result;
            }
            reader.readAsDataURL(file);
        }
    });

    // Click to trigger file upload
    document.getElementById('mainImagePreview').addEventListener('click', function () {
        document.getElementById('mainImageUpload').click();
    });

    // Save draft button handling
    document.getElementById('saveDraftBtn').addEventListener('click', function () {
        // Add your save draft logic here
        console.log('Saving draft...');
    });

    function valueChange(args) {
        console.log("Selected value: ", args.value);
        // Add any additional handling code here
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Get the form element
        var form = document.getElementById('addProductForm');

        // Get the Syncfusion button instance
        var addProductBtn = document.getElementById('addProductBtn').ej2_instances[0];

        // Add click event handler to the button
        addProductBtn.element.addEventListener('click', function (e) {
            e.preventDefault();
            console.log('Submit button clicked - processing with AJAX');

            // Collect form data
            var formData = new FormData(form);

            // Log form data to verify it's being collected correctly
            console.log('Form data being sent:');
            for (var pair of formData.entries()) {
                console.log(pair[0] + ': ' + pair[1]);
            }

            // Send AJAX request
            fetch('/Product/UpsertProduct', {
                method: 'POST',
                body: formData,
                // Don't set Content-Type header - fetch will set it properly with the boundary for multipart/form-data
            })
                .then(response => {
                    console.log('Response status:', response.status);

                    if (response.redirected) {
                        // If the server returns a redirect, follow it
                        window.location.href = response.url;
                        return;
                    }

                    if (!response.ok) {
                        throw new Error('Server returned ' + response.status + ' : ' + response.statusText);
                    }

                    return response.text();
                })
                .then(data => {
                    console.log('Success:', data);
                    // Handle success - redirect if needed or show success message
                    // window.location.href = '/Admin/Announcements';
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Handle error - show error message
                });
        });

        // Prevent the regular form submission
        form.addEventListener('submit', function (e) {
            e.preventDefault();
            console.log('Form standard submission prevented');
        });
    });
</script>