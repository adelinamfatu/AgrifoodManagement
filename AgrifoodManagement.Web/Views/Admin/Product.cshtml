@using AgrifoodManagement.Util.ValueObjects;
@using AgrifoodManagement.Util.Models;
@using Syncfusion.EJ2.Inputs;

@model ProductViewModel

@{
    Layout = "~/Views/Shared/_SidebarLayout.cshtml";

    var productCategoriesData = ViewBag.ProductCategories as List<CategoryNode>;

    var discountTypesData = new[] {
        "Choose New Year Discount",
        "Seasonal Discount",
        "Clearance Sale"
    };

    var unitsData = Enum.GetValues(typeof(MeasurementUnit))
                        .Cast<MeasurementUnit>()
                        .Select(g => g.ToString())
                        .ToList();
}

<div class="add-product-container">
    <form id="addProductForm" asp-controller="Product" asp-action="UpsertProductAsync" method="post" enctype="multipart/form-data">
        <input type="hidden" asp-for="Id" />

        <div class="page-header">
            <div class="header-title">
                <h1>@(Model.Id == Guid.Empty ? "Add New Product" : "Edit Product")</h1>
            </div>
            <div class="action-buttons">
                <ejs-button id="addProductBtn" type="submit" content="Add Product" cssClass="e-success"></ejs-button>
            </div>
        </div>

        <div class="form-container">
            <div class="form-left-panel">
                <div class="form-section">
                    <h2>General Information</h2>
                    <div class="form-group inline-input">
                        <label for="Name" title="Name Product">
                            <i class="fa fa-tag"></i>
                        </label>
                        <ejs-textbox id="Name" name="Name" value="@Model.Name" cssClass="e-outline"
                                     placeholder="Name Product" floatLabelType="Auto" required="true">
                        </ejs-textbox>
                    </div>

                    <div class="form-group inline-input">
                        <label for="Description" title="Description Product">
                            <i class="fa fa-info-circle"></i>
                        </label>
                        <ejs-textbox id="Description" name="Description" value="@Model.Description" cssClass="e-outline"
                                     placeholder="Description Product" floatLabelType="Auto"
                                     multiline="true" rows="4">
                        </ejs-textbox>
                    </div>
                </div>

                <div class="form-section">
                    <h2>Pricing And Stock</h2>
                    <div class="form-group inline-input form-row">
                        <div class="col">
                            <label for="Price" title="Base Pricing">
                                <i class="fa fa-dollar-sign"></i>
                            </label>
                            <div class="input-group">
                                <ejs-textbox id="Price" name="Price" value="@Model.Price" cssClass="e-outline"
                                             placeholder="Price" floatLabelType="Auto" type="number"
                                             step="0.01" required="true">
                                </ejs-textbox>
                            </div>
                        </div>

                        <div class="col">
                            <label for="Quantity" title="Stock">
                                <i class="fa fa-warehouse"></i>
                            </label>
                            <ejs-textbox id="Quantity" name="Quantity" value="@Model.Quantity" cssClass="e-outline"
                                         placeholder="Stock" floatLabelType="Auto" type="number" required="true">
                            </ejs-textbox>
                        </div>
                    </div>

                    <div class="form-group inline-input form-row">
                        <div class="col">
                            <label for="DiscountType" title="Discount Type">
                                <i class="fa fa-tag"></i>
                            </label>
                            <div class="input-group">
                                <ejs-dropdownlist id="DiscountType" name="DiscountType"
                                        dataSource="@discountTypesData"
                                        placeholder="Select discount type"
                                        index="0"
                                        popupHeight="220px">
                                    <e-dropdownlist-fields text="this" value="this"></e-dropdownlist-fields>
                                </ejs-dropdownlist>
                            </div>
                        </div>

                        <div class="col">
                            <label for="Discount" title="Discount">
                                <i class="fa fa-percentage"></i>
                            </label>
                            <div class="input-group">
                                <ejs-textbox id="Discount" name="Discount" cssClass="e-outline"
                                             placeholder="Discount" floatLabelType="Auto" type="number" min="0" max="100">
                                </ejs-textbox>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-section">
                    <h2>Additional Information</h2>
                    <div class="form-group inline-input form-row">
                        <div class="col">
                            <label for="UnitOfMeasurement" title="Unit of Measurement">
                                <i class="fa fa-ruler"></i>
                            </label>
                            <ejs-dropdownlist id="UnitOfMeasurement" name="UnitOfMeasurement"
                                              dataSource="@unitsData"
                                              value="@Model.UnitOfMeasurement"
                                              placeholder="Select unit of measurement"
                                              index="0"
                                              popupHeight="220px">
                                <e-dropdownlist-fields text="Unit" value="Id"></e-dropdownlist-fields>
                            </ejs-dropdownlist>
                        </div>

                        <div class="col">
                            <label for="ExpirationDate" title="Expiration Date">
                                <i class="fa fa-calendar-alt"></i>
                            </label>
                            <ejs-datepicker id="ExpirationDate" name="ExpirationDate"
                                            value="@Model.ExpirationDate"
                                            placeholder="Choose a Date" floatLabelType="Auto">
                            </ejs-datepicker>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-right-panel">
                <div class="upload-section">
                    <h2>Upload Product Images</h2>

                    <ejs-uploader id="UploadFiles"
                        autoUpload="false"
                        multiple="true"
                        showFileList="false"
                        selected="onFileSelect">
                    </ejs-uploader>

                    <div class="thumbnail-container">
                        <div class="thumbnail-upload">
                            <div class="thumbnail-preview">
                                <img src="/images/upload-placeholder.png" alt="Thumbnail 1" id="thumbnail1Img">
                            </div>
                            <button type="button" class="remove-btn" onclick="removeThumbnail(0)" aria-label="Remove image">×</button>
                        </div>
                        <div class="thumbnail-upload">
                            <div class="thumbnail-preview">
                                <img src="/images/upload-placeholder.png" alt="Thumbnail 2" id="thumbnail2Img">
                            </div>
                            <button type="button" class="remove-btn" onclick="removeThumbnail(1)" aria-label="Remove image">×</button>
                        </div>
                        <div class="thumbnail-upload">
                            <div class="thumbnail-preview">
                                <img src="/images/upload-placeholder.png" alt="Thumbnail 3" id="thumbnail3Img">
                            </div>
                            <button type="button" class="remove-btn" onclick="removeThumbnail(2)" aria-label="Remove image">×</button>
                        </div>
                    </div>
                </div>

                <div class="category-section">
                    <h2>Category</h2>
                    <div class="form-group inline-input">
                        <label for="Category" title="Product Category">
                            <i class="fa fa-list"></i>
                        </label>
                        <ejs-dropdowntree id="Category" name="Category"
                                          popupHeight="220px"
                                          value="@Model.Category"
                                          placeholder="Select a product category"
                                          changeOnBlur="false">
                            <e-dropdowntree-fields dataSource="@productCategoriesData"
                                                   value="Id"
                                                   text="Category"
                                                   parentValue="ParentId"
                                                   hasChildren="HasChildren"
                                                   expanded="true">
                            </e-dropdowntree-fields>
                        </ejs-dropdowntree>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<script>
    var thumbnailFiles = [null, null, null];

    function onFileSelect(args) {
        for (let i = 0; i < args.filesData.length; i++) {
            const emptyIndex = findFirstEmptySlot();
            if (emptyIndex === -1) {
                alert("You can upload a maximum of 3 images. Please remove one to add a new one.");
                break;
            }

            const fileData = args.filesData[i];
            const reader = new FileReader();
            reader.onload = (function (index) {
                return function (e) {
                    fileData.dataURL = e.target.result;

                    var thumbImg = document.getElementById("thumbnail" + (index + 1) + "Img");
                    if (thumbImg) {
                        thumbImg.src = e.target.result;
                    }

                    var removeBtn = document.querySelector('.thumbnail-upload:nth-child(' + (index + 1) + ') .remove-btn');
                    if (removeBtn) {
                        removeBtn.style.display = 'flex';
                    }
                };
            })(emptyIndex);
            reader.readAsDataURL(fileData.rawFile);

            thumbnailFiles[emptyIndex] = fileData;
        }
    }

    function findFirstEmptySlot() {
        for (let i = 0; i < thumbnailFiles.length; i++) {
            if (thumbnailFiles[i] === null) {
                return i;
            }
        }
        return -1;
    }

    function removeThumbnail(index) {
        if (thumbnailFiles[index] !== null) {
            var uploaderElement = document.getElementById('UploadFiles');
            if (uploaderElement &&
                uploaderElement.ej2_instances &&
                uploaderElement.ej2_instances[0]) {
                var uploaderObj = uploaderElement.ej2_instances[0];
                try {
                    uploaderObj.remove(thumbnailFiles[index].uid);
                } catch (e) {
                    console.error("Error removing file from uploader:", e);
                }
            }
            thumbnailFiles[index] = null;
            reorderThumbnails();
        }
    }

    function reorderThumbnails() {
        let newArray = thumbnailFiles.filter(file => file !== null);
        while (newArray.length < 3) {
            newArray.push(null);
        }
        thumbnailFiles = newArray;

        for (let i = 0; i < thumbnailFiles.length; i++) {
            var thumbImg = document.getElementById("thumbnail" + (i + 1) + "Img");
            var removeBtn = document.querySelector('.thumbnail-upload:nth-child(' + (i + 1) + ') .remove-btn');

            if (thumbnailFiles[i] !== null) {
                if (thumbImg) {
                    thumbImg.src = thumbnailFiles[i].dataURL;
                }
                
                if (removeBtn) {
                    removeBtn.style.display = 'flex';
                }
            } else {
                if (thumbImg) {
                    thumbImg.src = "/images/upload-placeholder.png";
                }
                
                if (removeBtn) {
                    removeBtn.style.display = 'none';
                }
            }
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        var form = document.getElementById('addProductForm');
        var addProductBtn = document.getElementById('addProductBtn').ej2_instances[0];

        addProductBtn.element.addEventListener('click', function (e) {
            e.preventDefault();

            var formData = new FormData(form);

            let uniqueFiles = new Set();

            for (let i = 0; i < thumbnailFiles.length; i++) {
                if (thumbnailFiles[i] !== null && !uniqueFiles.has(thumbnailFiles[i].rawFile.name)) {
                    uniqueFiles.add(thumbnailFiles[i].rawFile.name);
                    formData.append("Photos", thumbnailFiles[i].rawFile);
                }
            }

            fetch('/Product/UpsertProduct', {
                method: 'POST',
                body: formData,
            })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                        return;
                    }

                    if (!response.ok) {
                        throw new Error('Server returned ' + response.status + ' : ' + response.statusText);
                    }

                    return response.text();
                })
                .then(data => {
                    console.log('Success:', data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });

        form.addEventListener('submit', function (e) {
            e.preventDefault();
        });
    });
</script>