@using AgrifoodManagement.Util.Models;

@{
    Layout = "~/Views/Shared/_SidebarLayout.cshtml";

    var productCategoriesData = ViewBag.ProductCategories as List<CategoryNode>;
}

@model List<ProductViewModel>

<div class="announcement-container">
    <div class="search-filter-row">
        <div class="search-area">
            <input type="text" class="search-input" placeholder="Search your listings..." />
            <button class="search-button">
                <i class="fa fa-search"></i>
            </button>
        </div>

        <div class="filter-options">
            <ejs-dropdownlist id="productCategories"
                              dataSource="@productCategoriesData"
                              placeholder="Select a product category"
                              index="0"
                              popupHeight="220px"
                              change="valueChange">
                <e-dropdownlist-fields text="Category" value="Id"></e-dropdownlist-fields>
            </ejs-dropdownlist>

            <ejs-button id="addNewButton" content='<i class="fa fa-plus"></i> ADD NEW' onclick="navigateToProductPage()"></ejs-button>
        </div>
    </div>

    <ejs-chiplist id="chip-default">
        <e-chips>
            <e-chip text="Active" cssClass="e-primary" enabled="true"></e-chip>
            <e-chip text="Expiring Soon" cssClass="e-warning" enabled="true"></e-chip>
            <e-chip text="High Demand" cssClass="e-success" enabled="true"></e-chip>
            <e-chip text="Low Stock" cssClass="e-danger" enabled="true"></e-chip>
            <e-chip text="Archived" cssClass="e-secondary" enabled="true"></e-chip>
        </e-chips>
    </ejs-chiplist>

    <div class="results-header">
        <p>Showing @Model.Count active listings</p>

        <div class="view-options">
            <div class="sort-dropdown">
                <span>Sort by: </span>
                <select>
                    <option>Expiration Date</option>
                    <option>Price: High to Low</option>
                    <option>Price: Low to High</option>
                    <option>Quantity</option>
                    <option>Demand Forecast</option>
                </select>
            </div>
        </div>
    </div>

    <div class="products-container">
        @foreach (var product in Model)
        {
            <div class="product-card">
                <div class="product-header">
                    @if (product.PhotoUrls != null && product.PhotoUrls.Count > 0)
                    {
                        <img src="@product.PhotoUrls[0]" alt="@product.Name" class="product-image" />
                    }
                    else
                    {
                        <img src="/images/product-placeholder.png" alt="@product.Name" class="product-image" />
                    }

                    <div class="product-header-controls">
                        <button class="manage-btn" onclick="navigateToProductPage(@product.Id)" title="Manage Product">
                            <i class="fa fa-cog"></i> Manage
                        </button>

                        @if (!product.IsPromoted)
                        {
                            <button class="promote-btn" onclick="promoteProduct(@product.Id)">
                                <i class="fa fa-bullhorn"></i> Promote
                            </button>
                        }
                    </div>
                </div>

                <div class="product-content">
                    <div class="product-title-section">
                        <h3 class="product-name">@product.Name</h3>
                        <div class="product-controls">
                            <button class="edit-btn" title="Edit Listing"><i class="fa fa-pencil"></i></button>
                            <button class="archive-btn" title="Archive Listing"><i class="fa fa-archive"></i></button>
                        </div>
                    </div>

                    <div class="status-and-quantity">
                        <div class="status-badge @product.AnnouncementStatus.ToString().ToLower()">
                            @product.AnnouncementStatus
                        </div>

                        <div class="quantity-badge">
                            <i class="fa fa-balance-scale"></i> @product.Quantity @product.UnitOfMeasurement
                        </div>
                    </div>

                    <div class="product-price">$@product.Price.ToString("0.00") per @product.UnitOfMeasurement</div>

                    <p class="product-description">@product.Description</p>

                    <div class="product-details">
                        <div class="detail">
                            <i class="fa fa-calendar"></i>
                            <span>Expires: @product.ExpirationDate.ToString("MMM dd, yyyy")</span>
                            @if ((product.ExpirationDate - DateTime.Now).TotalDays < 7)
                            {
                                <span class="warning-tag">Expiring Soon</span>
                            }
                        </div>
                        <div class="detail">
                            <i class="fa fa-tag"></i>
                            <span>Category: @product.CategoryName</span>
                        </div>
                    </div>

                    <div class="product-footer">
                        <div class="metrics">
                            <div class="metric">
                                <span class="metric-value">12</span>
                                <span class="metric-label">Views</span>
                            </div>
                            <div class="metric">
                                <span class="metric-value">3</span>
                                <span class="metric-label">Inquiries</span>
                            </div>
                            <div class="suggested-price-tag">
                                Est. Market: $@((product.Price * 1.15m).ToString("0.00"))
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    function valueChange(args) {
        console.log("Selected value: ", args.value);
    }

    function navigateToProductPage() {
        window.location.href = "/Admin/Product";
    }

    function promoteProduct(productId) {
        fetch(`/api/products/${productId}/promote`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const promoteBtn = event.target.closest('.promote-btn');
                    const productCard = promoteBtn.closest('.product-card');

                    const promotedBadge = document.createElement('div');
                    promotedBadge.className = 'promoted-badge';
                    promotedBadge.innerHTML = '<i class="fa fa-star"></i> Promoted';

                    const statusBadge = productCard.querySelector('.status-badge');
                    statusBadge.parentNode.insertBefore(promotedBadge, statusBadge.nextSibling);

                    promoteBtn.remove();
                }
            })
            .catch(error => {
                console.error('Error promoting product:', error);
            });
    }
</script>