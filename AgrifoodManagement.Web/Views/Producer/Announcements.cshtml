@using AgrifoodManagement.Util.Models;

@{
    Layout = "~/Views/Shared/_ProducerSidebarLayout.cshtml";

    var productCategoriesData = ViewBag.ProductCategories as List<CategoryNode>;
    var sortOptions = new[] { "Expiration Date", "Price: High to Low", "Price: Low to High", "Quantity" };
    var current = ViewBag.CurrentFilter as string ?? "active";
}

@model List<UpsertProductViewModel>

<div class="announcement-container">
    <div class="search-filter-row">
        <div class="search-area">
            <ejs-textbox id="searchBox"
                placeholder="Search your listings..."
                floatLabelType="Never">
            </ejs-textbox>
            <i class="fa fa-search search-icon"></i>
        </div>

        <div class="filter-options">
            <ejs-dropdownlist id="productCategories"
                              dataSource="@productCategoriesData"
                              placeholder="Select a category"
                              popupHeight="220px"
                              change="categoryValueChange">
                <e-dropdownlist-fields text="Category" value="Id"></e-dropdownlist-fields>
            </ejs-dropdownlist>

            <ejs-button id="addNewButton" content='<i class="fa fa-plus"></i> ADD NEW' onclick="navigateToProductPage()"></ejs-button>
        </div>
    </div>

    <ejs-chiplist id="chip-default">
        <e-chips>
            <e-chip text="Active" value="active" cssClass="e-primary" selected="@(current=="active")" />
            <e-chip text="Expiring Soon" value="expiring" cssClass="e-warning" selected="@(current=="expiring")" />
            <e-chip text="Low Stock" value="lowStock" cssClass="e-danger" selected="@(current=="lowStock")" />
            <e-chip text="Archived" value="archived" cssClass="e-secondary" selected="@(current=="archived")" />
        </e-chips>
    </ejs-chiplist>

    <div class="results-header">
        <p id="listingCount">Showing @Model.Count active listings</p>

        <div class="view-options">
            <div class="sort-dropdown">
                <ejs-dropdownlist id="sortDropdown"
                                  dataSource="@sortOptions"
                                  placeholder="Sort by">
                </ejs-dropdownlist>
            </div>
        </div>
    </div>

    <div class="products-container">
        @foreach (var product in Model)
        {
            <div class="product-card"
                 data-expiration="@product.ExpirationDate.ToString("o")"
                 data-category-id="@product.Category"
                 data-price="@product.Price"
                 data-status="@product.AnnouncementStatus"
                 data-quantity="@product.Quantity">
                <div class="product-header">
                    @if (product.PhotoUrls != null && product.PhotoUrls.Count > 0)
                    {
                        <img src="@product.PhotoUrls[0]" alt="@product.Name" class="product-image" />
                    }
                    else
                    {
                        <img src="/images/no-image-placeholder.png" alt="@product.Name" class="product-image" />
                    }

                    @if (product.IsPromoted)
                    {
                        <span class="promoted-badge">Promoted</span>
                    }

                    <div class="product-header-controls">
                        <button class="manage-btn" onclick="navigateToProductPage('@product.Id')" title="Manage Product">
                            <i class="fa fa-cog"></i> Manage
                        </button>

                        @if (!product.IsPromoted)
                        {
                            <button class="promote-btn" onclick="promoteProduct('@product.Id', '@product.Name')">
                                <i class="fa fa-bullhorn"></i> Promote
                            </button>
                        }
                    </div>
                </div>

                <div class="product-content">
                    <div class="product-title-section">
                        <h3 class="product-name">@product.Name</h3>
                        <div class="product-controls">
                            <button class="edit-btn" title="Edit Listing"><i class="fa fa-pencil"></i></button>
                            <button class="archive-btn"
                                title="Archive Listing"
                                onclick="archiveProduct('@product.Id')">
                                <i class="fa fa-archive"></i>
                            </button>
                        </div>
                    </div>

                    <div class="status-and-quantity">
                        <div class="status-badge @product.AnnouncementStatus.ToString().ToLower()">
                            @product.AnnouncementStatus
                        </div>

                        <div class="quantity-badge">
                            <i class="fa fa-balance-scale"></i> @product.Quantity @product.UnitOfMeasurement
                        </div>
                    </div>

                    <div class="product-price">$@product.Price.ToString("0.00") per @product.UnitOfMeasurement</div>

                    <p class="product-description">@product.Description</p>

                    <div class="product-details">
                        <div class="detail">
                            <i class="fa fa-calendar"></i>
                            <span>Expires: @product.ExpirationDate.ToString("MMM dd, yyyy")</span>
                            @if ((product.ExpirationDate - DateTime.Now).TotalDays < 7)
                            {
                                <span class="warning-tag">Expiring Soon</span>
                            }
                        </div>
                        <div class="detail">
                            <i class="fa fa-tag"></i>
                            <span>Category: @product.CategoryName</span>
                        </div>
                    </div>

                    <div class="product-footer">
                        <div class="metrics">
                            <div class="metric">
                                <span class="metric-value">@product.CartQuantity</span>
                                <span class="metric-label">in carts</span>
                            </div>
                            <div class="metric">
                                <span class="metric-value">@product.WishlistQuantity</span>
                                <span class="metric-label">in wishlists</span>
                            </div>
                            <div class="suggested-price-tag">
                                Est. Market: $@((product.Price * 1.15m).ToString("0.00"))
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<ejs-toast id="actionToast" newestOnTop="true" showCloseButton="true" timeOut="4000">
    <e-toast-position X="Right" Y="Top"></e-toast-position>
</ejs-toast>

<script src="https://js.stripe.com/v3/"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Search by name and/or description
        var searchElem = document.getElementById("searchBox");
        if (searchElem && searchElem.ej2_instances && searchElem.ej2_instances[0]) {
            var searchTb = searchElem.ej2_instances[0];
            searchTb.change = function (args) {
                var term = (args.value || "").trim().toLowerCase();
                document.querySelectorAll(".product-card").forEach(function (card) {
                    var name = card.querySelector(".product-name").textContent.toLowerCase();
                    var desc = card.querySelector(".product-description").textContent.toLowerCase();
                    card.style.display = (!term || name.includes(term) || desc.includes(term))
                        ? "" : "none";
                });
            };

            updateActiveListingsCount();
        }

        //Sort dropdown
        var sortDd = document
            .getElementById("sortDropdown")
            .ej2_instances[0];

        sortDd.change = function (e) {
            var sel = e.itemData.value;
            var container = document.querySelector(".products-container");
            var cards = Array.from(container.querySelectorAll(".product-card"));
            var sorted;

            switch (sel) {
                case "Expiration Date":
                    sorted = cards.sort(function (a, b) {
                        return new Date(a.dataset.expiration)
                            - new Date(b.dataset.expiration);
                    });
                    break;
                case "Price: High to Low":
                    sorted = cards.sort(function (a, b) {
                        return parseFloat(b.dataset.price)
                            - parseFloat(a.dataset.price);
                    });
                    break;
                case "Price: Low to High":
                    sorted = cards.sort(function (a, b) {
                        return parseFloat(a.dataset.price)
                            - parseFloat(b.dataset.price);
                    });
                    break;
                case "Quantity":
                    sorted = cards.sort(function (a, b) {
                        return parseInt(b.dataset.quantity)
                            - parseInt(a.dataset.quantity);
                    });
                    break;
                default:
                    sorted = cards;
            }

            container.innerHTML = "";
            sorted.forEach(function (card) {
                container.appendChild(card);
            });
        };

        // Chip filter
        var chips = document.querySelectorAll('#chip-default .e-chip');
        chips.forEach(function (chip) {
            chip.addEventListener('click', function () {
                var status = chip.getAttribute('data-value');
                console.log(status);
                window.location.search = '?filter=' + status;
            });
        });
    });

    function showToast(type, title, message) {
        const toastObj = document.getElementById('actionToast').ej2_instances[0];
        toastObj.show({
            title: title,
            content: message,
            cssClass: `e-toast-${type}`
        });
    }

    // Update active listings count
    function updateActiveListingsCount() {
        var visibleProducts = document.querySelectorAll(".product-card:not([style*='display: none'])");
        document.getElementById("listingCount").innerText = "Showing " + visibleProducts.length + " listings";
    }

    function categoryValueChange(args) {
        var selectedCategoryId = args.value?.toString();

        document.querySelectorAll(".product-card").forEach(function (card) {
            var cardCategoryId = card.getAttribute("data-category-id")?.toString();
            card.style.display = (!selectedCategoryId || cardCategoryId === selectedCategoryId)
                ? "" : "none";
        });

        updateActiveListingsCount();
    }

    function navigateToProductPage(productId) {
        try {
            if (productId) {
                window.location.href = "/Producer/Product?id=" + productId;
            } else {
                window.location.href = "/Producer/Product";
            }
        } catch (error) {
            showToast("error", "Error", "There was an error. Please try again later");
        }
    }

    function promoteProduct(productId, productName) {
        ej.popups.DialogUtility.confirm({
            title: 'Promote Product',
            content: 'This will charge your account and boost your listing. Continue?',
            okButton: {
                click: function () {
                    this.hide();
                    fetch('@Url.Action("Promote", "Product")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            productId: productId,
                            productName: productName
                        })
                    })
                        .then(async res => {
                            if (!res.ok) {
                                const text = await res.text();
                                showToast("error", "Error", "There was an error. Please try again later");
                            }
                            return res.json();
                        })
                        .then(data => {
                            const stripe = Stripe(data.publishableKey);
                            return stripe.redirectToCheckout({ sessionId: data.sessionId });
                        })
                }
            },
            cancelButton: { text: 'Cancel', click: function () { this.hide(); } },
            width: '400px', position: { X: 'center', Y: 'center' }
        });
    }

    function archiveProduct(productId) {
        ej.popups.DialogUtility.confirm({
            title: 'Archive Product',
            content: 'Are you sure you want to archive this listing?',
            okButton: {
                click: function () {
                    this.hide();
                    fetch('@Url.Action("UpdateProductStatus", "Product")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            productId: productId,
                            newStatus: 'Archived'})
                    })
                        .then(res => {
                            if (res.ok) {
                                showToast("success", "Archived", "Product archived.");
                                setTimeout(() => location.reload(), 1000);
                            } else {
                                showToast("error", "Error", "Could not archive product.");
                            }
                        });
                }
            },
            cancelButton: { text: 'Cancel', click: function () { this.hide(); } },
            width: '400px', position: { X: 'center', Y: 'center' }
        });
    }
</script>