@using AgrifoodManagement.Web.Models.Forum;
@using AgrifoodManagement.Util.ValueObjects;
@using AgrifoodManagement.Util.Formatters;
@using Syncfusion.EJ2.Popups;
@using Syncfusion.EJ2.Inputs;
@using Syncfusion.EJ2.DropDowns;

@{
    Layout = "~/Views/Shared/_ProducerSidebarLayout.cshtml";
    ViewData["Title"] = "Forum";
}

@{
    var filterOptions = new string[] { "Latest first", "Popular first", "Oldest first" };

    var forumCategories = Enum.GetValues(typeof(ForumCategory))
        .Cast<ForumCategory>()
        .Select(fc => new SelectListItem
                {
                    Text = SplitPascalCase.Format(fc.ToString()),
                    Value = fc.ToString()
                }).ToList();
}

@model List<TopicViewModel>

<div class="forum-page-container">
    <div class="message-container">
        <ejs-message id="msg_success"
                     content="Your thread will be posted shortly"
                     severity="Success"
                     visible=false>
        </ejs-message>

        <ejs-message id="msg_warning"
                     content="Network issue. Please try again."
                     severity="Warning"
                     visible=false>
        </ejs-message>

        <ejs-message id="msg_error"
                     content="An error occurred while submitting your discussion"
                     severity="Error"
                     visible=false>
        </ejs-message>
    </div>

    <div id="target" class="forum-container">
        <div class="forum-header">
            <div class="filters">
                <ejs-dropdownlist id="filterDropdown"
                                  dataSource="filterOptions"
                                  placeholder="Select Filter">
                </ejs-dropdownlist>
            </div>
        </div>

        <div class="forum-content">
            <div class="discussions">
                @foreach (var topic in Model)
                {
                    <div class="topic-card"
                         data-topic-id="@topic.Id"
                         data-category="@topic.Category"
                         data-date="@topic.CreatedAt.ToString("o")"
                         data-comments="@topic.CommentsCount">
                        <div class="topic-main">
                            <div class="topic-author">
                                <div class="author-avatar">
                                    <img src="@(string.IsNullOrEmpty(topic.Author.AvatarUrl) ? "/api/placeholder/40/40" : topic.Author.AvatarUrl)" alt="@topic.Author.Name avatar">
                                </div>
                            </div>
                            <div class="topic-content">
                                <div class="topic-header">
                                    <h3 class="topic-title">@topic.Title</h3>
                                </div>
                                @if (topic.Category != null)
                                {
                                    <div class="category-tag tag-@topic.Category" style="color: @topic.Category.GetCategoryColor()">@topic.Category.GetDisplayName()</div>
                                }
                                @if (topic.CommentsCount > 0)
                                {
                                    <div class="topic-meta">Latest reply from @topic.LatestReplyAuthor @topic.LatestReplyTimeAgo</div>
                                }
                                <p class="topic-text">@topic.Text</p>
                                <div class="topic-stats">
                                    <div class="topic-commenters">
                                        @foreach (var commenter in topic.TopCommenters.Take(4))
                                        {
                                            <div class="commenter-avatar">
                                                <img src="@(string.IsNullOrEmpty(commenter.AvatarUrl) ? "/api/placeholder/24/24" : commenter.AvatarUrl)" alt="@commenter.Name">
                                            </div>
                                        }
                                    </div>
                                    <span class="comments-count" onclick="toggleComments(@topic.Id)">@topic.CommentsCount Comments</span>
                                </div>
                            </div>
                        </div>
                        <div class="comments-section" id="comments-@topic.Id">
                            <div class="comments-list">
                                @if (topic.Comments != null && topic.Comments.Any())
                                {
                                    foreach (var comment in topic.Comments)
                                    {
                                        <div class="comment">
                                            <div class="comment-author">
                                                <div class="author-avatar">
                                                    <img src="@(string.IsNullOrEmpty(comment.Author.AvatarUrl) ? "/api/placeholder/40/40" : comment.Author.AvatarUrl)" alt="@comment.Author.Name avatar">
                                                </div>
                                            </div>
                                            <div class="comment-content">
                                                <div class="comment-header">
                                                    <span class="comment-author-name">@comment.Author.Name</span>
                                                    <span class="comment-date">@comment.TimeAgo</span>
                                                </div>
                                                <p class="comment-text">@comment.Text</p>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p>No comments yet. Be the first to comment!</p>
                                }
                            </div>
                            <div class="add-comment">
                                <ejs-textarea id="commentTextarea-@topic.Id"
                                              class="comment-input" placeholder="Add your comment..."
                                              floatLabelType="Auto" cssClass="e-outline" rows="5" cols="250"
                                              resizeMode="Vertical"></ejs-textarea>
                                <ejs-button id="submitCommentBtn-@topic.Id" class="submit-comment-btn" content="Submit" onclick="submitComment('@topic.Id')" isPrimary="true"></ejs-button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="forum-sidebar">
                <ejs-button id="openDialogBtn" class="new-discussion-btn-large" content="Start New Discussion" isPrimary="true"></ejs-button>

                <div class="forum-sidebar-section">
                    <ul class="forum-sidebar-links">
                        <li class="forum-sidebar-link active" data-category="All">
                            <i class="fas fa-list"></i>
                            <span>All Categories</span>
                        </li>

                        @foreach (var forumCategory in Enum.GetValues(typeof(ForumCategory)).Cast<ForumCategory>())
                        {
                            <li class="forum-sidebar-link"
                                data-category="@forumCategory">
                                @Html.Raw(forumCategory.GetIcon())
                                <span>@forumCategory.GetDisplayName()</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="newDiscussionDialog"></div>

<script>
    // Function to toggle comments visibility
    function toggleComments(topicId) {
        const commentsSection = document.getElementById(`comments-${topicId}`);
        if (commentsSection.style.display === 'block') {
            commentsSection.style.display = 'none';
        } else {
            document.querySelectorAll('.comments-section').forEach(section => {
                section.style.display = 'none';
            });
            commentsSection.style.display = 'block';
        }
    }

    function submitComment(topicId) {
        const commentSection = document.getElementById(`comments-${topicId}`);
        const commentInput = commentSection.querySelector('.comment-input');
        const commentText = commentInput.value.trim();

        if (commentText) {
            fetch('/Forum/AddComment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    topicId: topicId,
                    commentText: commentText
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const commentsList = commentSection.querySelector('.comments-list');
                        const noCommentsMsg = commentsList.querySelector('p');

                        if (noCommentsMsg && noCommentsMsg.textContent.includes('No comments yet')) {
                            commentsList.innerHTML = '';
                        }
                        const avatarUrl = data.avatarUrl && data.avatarUrl.trim() !== '' ? data.avatarUrl : '/api/placeholder/40/40'; // Fallback image
                        console.log(avatarUrl);

                        const newComment = document.createElement('div');
                        newComment.className = 'comment';
                        newComment.innerHTML = `
                            <div class="comment-author">
                                <div class="author-avatar">
                                    <img src="${data.avatarUrl && data.avatarUrl.trim() !== '' ? data.avatarUrl : '/api/placeholder/40/40'}" alt="${data.authorName ? data.authorName : 'Unknown'} avatar">
                                </div>
                                </div>
                                <div class="comment-content">
                                    <div class="comment-header">
                                        <span class="comment-author-name">${data.authorName ? data.authorName : 'Unknown'}</span>
                                        <span class="comment-date">${data.timeAgo}</span>
                                    </div>
                                    <p class="comment-text">${commentText}</p>
                                </div>
                                `;
                        commentsList.appendChild(newComment);
                        commentInput.value = '';
                        const topicCard = document.querySelector(`.topic-card[data-topic-id="${topicId}"]`);
                        const commentsCountElem = topicCard.querySelector('.comments-count');
                        const currentCount = parseInt(commentsCountElem.textContent);
                        commentsCountElem.textContent = `${currentCount + 1} Comments`;
                    }
                })
                .catch(error => {
                    console.error('Error submitting comment:', error);
                });
        }
    }

    document.querySelectorAll('.topic-main').forEach(topicMain => {
        topicMain.addEventListener('click', function () {
            const topicId = this.closest('.topic-card').dataset.topicId;
            toggleComments(topicId);
        });
    });
    document.querySelectorAll('.comments-count').forEach(commentsCount => {
        commentsCount.addEventListener('click', function (e) {
            e.stopPropagation();
        });
    });
    document.querySelectorAll('.forum-sidebar-link').forEach(link => {
        link.addEventListener('click', function () {
            document.querySelectorAll('.forum-sidebar-link').forEach(l => l.classList.remove('active'));
            this.classList.add('active');

            const selectedCat = this.getAttribute('data-category');

            document.querySelectorAll('.topic-card').forEach(card => {
                const cardCat = card.getAttribute('data-category');
                if (selectedCat === 'All' || cardCat === selectedCat) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    });

    function initializeDialog() {
        var dialogObj = new ej.popups.Dialog({
            header: 'Add New Discussion',
            showCloseIcon: true,
            width: '500px',
            position: { X: 'center', Y: '100px' },
            target: document.getElementById('target'),
            visible: false,
            buttons: [
                {
                    click: function () {
                        var title = document.getElementById('discussionTitle').value;
                        var content = document.getElementById('discussionContent').value;
                        var category = document.getElementById('discussionCategory').value;

                        if (!title.trim()) {
                            alert("Please enter a title");
                            return;
                        }

                        fetch('/Forum/AddForumThread', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ title, content, category })
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    showMessage('msg_success');
                                } else {
                                    showMessage('msg_error');
                                }
                            })
                            .catch(err => {
                                showMessage('msg_warning');
                            });
                        document.getElementById('discussionTitle').value = '';
                        document.getElementById('discussionContent').value = '';
                        dialogObj.hide();
                    },
                    buttonModel: { content: 'Add Discussion', isPrimary: true }
                },
                {
                    click: function () {
                        dialogObj.hide();
                    },
                    buttonModel: { content: 'Cancel' }
                }
            ],
            content: `
                        <div class="form-group" style="margin-bottom: 15px;">
                            <label for="discussionTitle">Title</label>
                            <input type="text" id="discussionTitle" class="form-control" placeholder="Enter discussion title" />
                        </div>
                        <div class="form-group" style="margin-bottom: 15px;">
                            <label for="discussionContent">Content</label>
                            <textarea id="discussionContent" class="form-control" placeholder="Enter discussion content" rows="4"></textarea>
                        </div>
                        <div class="form-group" style="margin-bottom: 15px;">
                            <label for="discussionCategory">Category</label>
                                <select id="discussionCategory" class="form-control">
                                @foreach (var category in (List<SelectListItem>)forumCategories)
                                {
                                        <option value="@category.Value">@category.Text</option>
                                }
                                </select>
                        </div>
                    `
        });
        dialogObj.appendTo('#newDiscussionDialog');
        window.newDiscussionDialog = dialogObj;
        document.getElementById('openDialogBtn').addEventListener('click', function () {
            window.newDiscussionDialog.show();
        });
    }

    function showMessage(id, duration = 3000) {
        const msgInstance = document.getElementById(id).ej2_instances[0];

        if (msgInstance) {
            msgInstance.element.style.display = 'block';

            setTimeout(() => {
                msgInstance.element.style.display = 'none';
            }, duration);
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        initializeDialog();

        msg_success = document.getElementById('msg_success').ej2_instances[0];
        msg_warning = document.getElementById('msg_warning').ej2_instances[0];
        msg_error = document.getElementById('msg_error').ej2_instances[0];

        // Sort topics based on the dropdown
        var filterDropdown = document.getElementById("filterDropdown").ej2_instances[0];
        filterDropdown.change = function (e) {
            const selected = e.itemData.value;
            const topicsContainer = document.querySelector(".discussions");
            const topicCards = Array.from(topicsContainer.querySelectorAll(".topic-card"));

            let sortedCards = topicCards;

            if (selected === "Latest first") {
                sortedCards = topicCards.sort((a, b) =>
                    new Date(b.dataset.date) - new Date(a.dataset.date)
                );
            } else if (selected === "Oldest first") {
                sortedCards = topicCards.sort((a, b) =>
                    new Date(a.dataset.date) - new Date(b.dataset.date)
                );
            } else if (selected === "Popular first") {
                sortedCards = topicCards.sort((a, b) =>
                    parseInt(b.dataset.comments) - parseInt(a.dataset.comments)
                );
            }

            topicsContainer.innerHTML = '';
            sortedCards.forEach(card => topicsContainer.appendChild(card));
        };
    });
</script>