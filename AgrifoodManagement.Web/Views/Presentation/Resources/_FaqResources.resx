<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Answer1" xml:space="preserve">
    <value>To list your stock, navigate to your announcements page and select "Add New Product." Provide details such as quantity, category, expiration date, price, and location. You can also upload images and update or archive the listing at any time.</value>
  </data>
  <data name="Answer2" xml:space="preserve">
    <value>Just head over to our Map page—you’ll see pins for every supplier plotted on an interactive map. Enable location access (or enter an address) to center the view around you, then click any pin to view that supplier’s details.</value>
  </data>
  <data name="Answer3" xml:space="preserve">
    <value>Go to the Forecast page, select your product, set a date range and granularity, then click Run Forecast. You’ll see historical demand (dashed line), predicted demand (solid markers), and a 95% confidence band. A brief summary below—e.g. “Demand is increasing by about 27.9%”—helps you plan inventory and promotions.</value>
  </data>
  <data name="Answer4" xml:space="preserve">
    <value>We use machine learning to analyze historical sales data, current demand, and market trends to estimate future prices. This helps farmers decide whether it's worth harvesting certain products next season.</value>
  </data>
  <data name="Answer5" xml:space="preserve">
    <value>Premium listings appear at the top of search results, increasing visibility. You can purchase premium placements to get more exposure for your products.</value>
  </data>
  <data name="Answer6" xml:space="preserve">
    <value>Actually, you can save your favorite products with our Wishlist feature! Just click the heart icon on any product to add it to your Wishlist. Then visit your Account &gt; Wishlist page to see all your saved items in one place. From there, you can quickly move them into your cart or track price changes.</value>
  </data>
  <data name="Header" xml:space="preserve">
    <value>Find answers to common questions about how our agro-food management platform works.</value>
  </data>
  <data name="Question1" xml:space="preserve">
    <value>How do I list my stock as a seller?</value>
  </data>
  <data name="Question2" xml:space="preserve">
    <value>How can I find the nearest supplier?</value>
  </data>
  <data name="Question3" xml:space="preserve">
    <value>How can I forecast future demand for my products?</value>
  </data>
  <data name="Question4" xml:space="preserve">
    <value>How are price estimations calculated?</value>
  </data>
  <data name="Question5" xml:space="preserve">
    <value>What is the premium listing option?</value>
  </data>
  <data name="Question6" xml:space="preserve">
    <value>How does the wishlist work?</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Frequently Asked Questions</value>
  </data>
</root>